[{"id": "190", "title": "Count Characters in a String", "description": "Write a function that counts the number of characters in a given string.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": \"OpenAI\",\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": \"\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"Java programming\",\r\n        \"expected_output\": 16\r\n    },\r\n    {\r\n        \"input\": \"This is fun\",\r\n        \"expected_output\": 11\r\n    },\r\n    {\r\n        \"input\": \"@#$%\",\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": \"12345\",\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": \"!@#$%^&*()_+\",\r\n        \"expected_output\": 13\r\n    },\r\n    {\r\n        \"input\": \"Spaces    everywhere\",\r\n        \"expected_output\": 23\r\n    },\r\n    {\r\n        \"input\": \"One, Two, Three!\",\r\n        \"expected_output\": 16\r\n    }\r\n]"}, {"id": "189", "title": "Reverse a String", "description": "Write a function that reverses a given string.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": \"olleh\"\r\n    },\r\n    {\r\n        \"input\": \"world\",\r\n        \"expected_output\": \"dlrow\"\r\n    },\r\n    {\r\n        \"input\": \"Java\",\r\n        \"expected_output\": \"avaJ\"\r\n    },\r\n    {\r\n        \"input\": \"12345\",\r\n        \"expected_output\": \"54321\"\r\n    },\r\n    {\r\n        \"input\": \"a\",\r\n        \"expected_output\": \"a\"\r\n    },\r\n    {\r\n        \"input\": \"\",\r\n        \"expected_output\": \"\"\r\n    },\r\n    {\r\n        \"input\": \"racecar\",\r\n        \"expected_output\": \"racecar\"\r\n    },\r\n    {\r\n        \"input\": \"A man, a plan, a canal: Panama\",\r\n        \"expected_output\": \"amanaP :nalp a ,nam A\"\r\n    },\r\n    {\r\n        \"input\": \"Able was I ere I saw Elba\",\r\n        \"expected_output\": \"ablE was I ere I saw elbA\"\r\n    },\r\n    {\r\n        \"input\": \"No lemon, no melon\",\r\n        \"expected_output\": \"no melon, no lemon\"\r\n    }\r\n]"}, {"id": "188", "title": "Check if String is Empty", "description": "Write a function that checks if a given string is empty.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": \"\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \" \",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"   \",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"\t\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"\n\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"  text  \",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"abc\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"xyz\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"hello world\",\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "187", "title": "Find Maximum in an Array", "description": "Write a function that finds the maximum value in an array.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": [1, 5, 3, 9, 2],\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": [-10, -3, -5, -1],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [0, 0, 0, 0],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [2, 8, 6, 10],\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": [15, 25, 35, 45],\r\n        \"expected_output\": 45\r\n    },\r\n    {\r\n        \"input\": [5, 2, 8, 6],\r\n        \"expected_output\": 8\r\n    },\r\n    {\r\n        \"input\": [-1, -2, -3, -4],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [1],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30, 5],\r\n        \"expected_output\": 30\r\n    },\r\n    {\r\n        \"input\": [4, 4, 4],\r\n        \"expected_output\": 4\r\n    }\r\n]"}, {"id": "186", "title": "Convert Binary to Decimal", "description": "Write a function that converts a binary number (given as a string) to its decimal equivalent.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": \"1010\",\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": \"1111\",\r\n        \"expected_output\": 15\r\n    },\r\n    {\r\n        \"input\": \"1001\",\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": \"0\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"1\",\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": \"11010\",\r\n        \"expected_output\": 26\r\n    },\r\n    {\r\n        \"input\": \"101010\",\r\n        \"expected_output\": 42\r\n    },\r\n    {\r\n        \"input\": \"11111\",\r\n        \"expected_output\": 31\r\n    },\r\n    {\r\n        \"input\": \"10000\",\r\n        \"expected_output\": 16\r\n    },\r\n    {\r\n        \"input\": \"1100\",\r\n        \"expected_output\": 12\r\n    }\r\n]"}, {"id": "185", "title": "Check if Number is Even or Odd", "description": "Write a function that checks if a number is even or odd.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": 4,\r\n        \"expected_output\": \"Even\"\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": \"Odd\"\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": \"Even\"\r\n    },\r\n    {\r\n        \"input\": -2,\r\n        \"expected_output\": \"Even\"\r\n    },\r\n    {\r\n        \"input\": -3,\r\n        \"expected_output\": \"Odd\"\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": \"Even\"\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": \"Odd\"\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": \"Even\"\r\n    },\r\n    {\r\n        \"input\": 101,\r\n        \"expected_output\": \"Odd\"\r\n    },\r\n    {\r\n        \"input\": -11,\r\n        \"expected_output\": \"Odd\"\r\n    }\r\n]"}, {"id": "184", "title": "Find the Minimum Element in an Array", "description": "Write a function that finds the minimum element in an array.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": [3, 1, 4, 1, 5],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [-10, -3, -5, -1],\r\n        \"expected_output\": -10\r\n    },\r\n    {\r\n        \"input\": [0, 0, 0, 0],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [2, 8, 6, 1],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [4, 2, 9, 7],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [100, 200, 300],\r\n        \"expected_output\": 100\r\n    },\r\n    {\r\n        \"input\": [15, 25, 35, 45],\r\n        \"expected_output\": 15\r\n    },\r\n    {\r\n        \"input\": [3, 3, 3],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [-5, -10, -3],\r\n        \"expected_output\": -10\r\n    },\r\n    {\r\n        \"input\": [6],\r\n        \"expected_output\": 6\r\n    }\r\n]"}, {"id": "183", "title": "Calculate the Area of a Rectangle", "description": "Write a function that calculates the area of a rectangle given its length and width.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": [5, 10],\r\n        \"expected_output\": 50\r\n    },\r\n    {\r\n        \"input\": [3, 7],\r\n        \"expected_output\": 21\r\n    },\r\n    {\r\n        \"input\": [0, 5],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [4.5, 3.2],\r\n        \"expected_output\": 14.4\r\n    },\r\n    {\r\n        \"input\": [10, 10],\r\n        \"expected_output\": 100\r\n    },\r\n    {\r\n        \"input\": [1, 1],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [20, 5],\r\n        \"expected_output\": 100\r\n    },\r\n    {\r\n        \"input\": [15, 3],\r\n        \"expected_output\": 45\r\n    },\r\n    {\r\n        \"input\": [7, 8],\r\n        \"expected_output\": 56\r\n    },\r\n    {\r\n        \"input\": [12, 10],\r\n        \"expected_output\": 120\r\n    }\r\n]"}, {"id": "182", "title": "Convert Celsius to Kelvin", "description": "Write a function that converts Celsius to Kelvin.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 273.15\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": 373.15\r\n    },\r\n    {\r\n        \"input\": -40,\r\n        \"expected_output\": 233.15\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": 298.15\r\n    },\r\n    {\r\n        \"input\": 37,\r\n        \"expected_output\": 310.15\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 283.15\r\n    },\r\n    {\r\n        \"input\": -273.15,\r\n        \"expected_output\": 0.0\r\n    },\r\n    {\r\n        \"input\": 200,\r\n        \"expected_output\": 473.15\r\n    },\r\n    {\r\n        \"input\": 30,\r\n        \"expected_output\": 303.15\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": 288.15\r\n    }\r\n]"}, {"id": "181", "title": "Find the GCD of Two Numbers", "description": "Write a function that calculates the Greatest Common Divisor (GCD) of two numbers.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": [48, 18],\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": [101, 103],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [54, 24],\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": [56, 98],\r\n        \"expected_output\": 14\r\n    },\r\n    {\r\n        \"input\": [8, 12],\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": [20, 50],\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": [100, 80],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [5, 0],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [0, 5],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [1, 1],\r\n        \"expected_output\": 1\r\n    }\r\n]"}, {"id": "180", "title": "Check if Character is Vowel", "description": "Write a function that checks if a given character is a vowel (a, e, i, o, u).", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": \"a\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"b\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"o\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"z\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"E\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"Y\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"u\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"i\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"c\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"@\",\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "179", "title": "Calculate Area of Circle", "description": "Write a function that calculates the area of a circle given its radius.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 78.54\r\n    },\r\n    {\r\n        \"input\": 3,\r\n        \"expected_output\": 28.27\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 153.94\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 314.16\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 3.14\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 0.0\r\n    },\r\n    {\r\n        \"input\": 2.5,\r\n        \"expected_output\": 19.63\r\n    },\r\n    {\r\n        \"input\": 12,\r\n        \"expected_output\": 452.39\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": 706.86\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": 1963.50\r\n    }\r\n]"}, {"id": "178", "title": "Count Vowels in a String", "description": "Write a function that counts the number of vowels in a given string.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": \"OpenAI\",\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": \"Sky\",\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": \"This is a test\",\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": \"Java programming\",\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": \"I love coding\",\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": \"12345\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"!@#$%\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"aeiou\",\r\n        \"expected_output\": 5\r\n    }\r\n]"}, {"id": "177", "title": "Sort an Array", "description": "Write a function that sorts an array of integers in ascending order.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": [3, 1, 4, 1, 5],\r\n        \"expected_output\": [1, 1, 3, 4, 5]\r\n    },\r\n    {\r\n        \"input\": [10, 8, 12, 5],\r\n        \"expected_output\": [5, 8, 10, 12]\r\n    },\r\n    {\r\n        \"input\": [-1, -5, 0, 3],\r\n        \"expected_output\": [-5, -1, 0, 3]\r\n    },\r\n    {\r\n        \"input\": [6, 2, 9, 1],\r\n        \"expected_output\": [1, 2, 6, 9]\r\n    },\r\n    {\r\n        \"input\": [0],\r\n        \"expected_output\": [0]\r\n    },\r\n    {\r\n        \"input\": [2, 2, 1],\r\n        \"expected_output\": [1, 2, 2]\r\n    },\r\n    {\r\n        \"input\": [5, 10, 2, 1],\r\n        \"expected_output\": [1, 2, 5, 10]\r\n    },\r\n    {\r\n        \"input\": [7, 3, 9, 0],\r\n        \"expected_output\": [0, 3, 7, 9]\r\n    },\r\n    {\r\n        \"input\": [4, 6, 8],\r\n        \"expected_output\": [4, 6, 8]\r\n    },\r\n    {\r\n        \"input\": [100, 1, 50],\r\n        \"expected_output\": [1, 50, 100]\r\n    }\r\n]"}, {"id": "176", "title": "Find Fibonacci Number", "description": "Write a function that returns the Nth Fibonacci number.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 55\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 3,\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": 4,\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": 6,\r\n        \"expected_output\": 8\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 13\r\n    },\r\n    {\r\n        \"input\": 8,\r\n        \"expected_output\": 21\r\n    },\r\n    {\r\n        \"input\": 9,\r\n        \"expected_output\": 34\r\n    }\r\n]"}, {"id": "175", "title": "Check for Anagram", "description": "Write a function that checks if two strings are anagrams.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": [\"listen\", \"silent\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"hello\", \"world\"],\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": [\"evil\", \"vile\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"rat\", \"tar\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"apple\", \"pale\"],\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": [\"binary\", \"brainy\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"anagram\", \"nagaram\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"java\", \"avaj\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"abcd\", \"dcba\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"hello\", \"olleh\"],\r\n        \"expected_output\": true\r\n    }\r\n]"}, {"id": "174", "title": "Find the Maximum Element in an Array", "description": "Write a function that finds the maximum element in an array.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": [1, 5, 3, 9, 2],\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": [-10, -3, -5, -1],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [0, 0, 0, 0],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [2, 8, 6, 1],\r\n        \"expected_output\": 8\r\n    },\r\n    {\r\n        \"input\": [4, 2, 9, 7],\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": [100, 200, 300],\r\n        \"expected_output\": 300\r\n    },\r\n    {\r\n        \"input\": [15, 25, 35, 45],\r\n        \"expected_output\": 45\r\n    },\r\n    {\r\n        \"input\": [3, 3, 3],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [-5, -10, -3],\r\n        \"expected_output\": -3\r\n    },\r\n    {\r\n        \"input\": [6],\r\n        \"expected_output\": 6\r\n    }\r\n]"}, {"id": "173", "title": "Calculate Factorial", "description": "Write a function that calculates the factorial of a given number.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 120\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 5040\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 3,\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": 4,\r\n        \"expected_output\": 24\r\n    },\r\n    {\r\n        \"input\": 8,\r\n        \"expected_output\": 40320\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 3628800\r\n    },\r\n    {\r\n        \"input\": 12,\r\n        \"expected_output\": 479001600\r\n    },\r\n    {\r\n        \"input\": 6,\r\n        \"expected_output\": 720\r\n    }\r\n]"}, {"id": "172", "title": "Reverse a String", "description": "Write a function that reverses a given string.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": \"olleh\"\r\n    },\r\n    {\r\n        \"input\": \"OpenAI\",\r\n        \"expected_output\": \"IAnepO\"\r\n    },\r\n    {\r\n        \"input\": \"racecar\",\r\n        \"expected_output\": \"racecar\"\r\n    },\r\n    {\r\n        \"input\": \"Java\",\r\n        \"expected_output\": \"avaJ\"\r\n    },\r\n    {\r\n        \"input\": \"12345\",\r\n        \"expected_output\": \"54321\"\r\n    },\r\n    {\r\n        \"input\": \"!@#$%\",\r\n        \"expected_output\": \"%$#@!\"\r\n    },\r\n    {\r\n        \"input\": \"\",\r\n        \"expected_output\": \"\"\r\n    },\r\n    {\r\n        \"input\": \"singleword\",\r\n        \"expected_output\": \"drowelgnis\"\r\n    },\r\n    {\r\n        \"input\": \"Palindrome\",\r\n        \"expected_output\": \"emordnilaP\"\r\n    },\r\n    {\r\n        \"input\": \"a\",\r\n        \"expected_output\": \"a\"\r\n    }\r\n]"}, {"id": "171", "title": "Check for Prime Number", "description": "Write a function that checks if a number is prime.", "language": "java", "test_cases": "[\r\n    {\r\n        \"input\": 11,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 16,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 17,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 18,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 19,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 23,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": -5,\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "170", "title": "Count Consonants in a String", "description": "Write a function that counts the number of consonants in a given string.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": \"OpenAI\",\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": \"This is a test\",\r\n        \"expected_output\": 7\r\n    },\r\n    {\r\n        \"input\": \"Sky\",\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": \"Programming\",\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": \"12345\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"!@#$%^&*()\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"aAeEiIoOuU\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"Consonants!\",\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": \"C programming language\",\r\n        \"expected_output\": 11\r\n    }\r\n]"}, {"id": "169", "title": "Check for Alphabet", "description": "Write a function that checks whether a given character is an alphabet (a-z or A-Z).", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"a\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"1\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"Z\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"@\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"b\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"C\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"3\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"d\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"!\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"e\",\r\n        \"expected_output\": true\r\n    }\r\n]"}, {"id": "168", "title": "Calculate Simple Interest", "description": "Write a function that calculates simple interest given principal, rate, and time.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": [1000, 5, 2],\r\n        \"expected_output\": 100\r\n    },\r\n    {\r\n        \"input\": [1500, 4, 3],\r\n        \"expected_output\": 180\r\n    },\r\n    {\r\n        \"input\": [2000, 3, 1],\r\n        \"expected_output\": 60\r\n    },\r\n    {\r\n        \"input\": [500, 10, 5],\r\n        \"expected_output\": 250\r\n    },\r\n    {\r\n        \"input\": [1200, 5, 4],\r\n        \"expected_output\": 240\r\n    },\r\n    {\r\n        \"input\": [2500, 6, 2],\r\n        \"expected_output\": 300\r\n    },\r\n    {\r\n        \"input\": [10000, 2, 10],\r\n        \"expected_output\": 2000\r\n    },\r\n    {\r\n        \"input\": [7000, 3.5, 3],\r\n        \"expected_output\": 735\r\n    },\r\n    {\r\n        \"input\": [8000, 8, 2],\r\n        \"expected_output\": 1280\r\n    },\r\n    {\r\n        \"input\": [9000, 5, 5],\r\n        \"expected_output\": 2250\r\n    }\r\n]"}, {"id": "167", "title": "Calculate Power of a Number Iteratively", "description": "Write a function that calculates the power of a number using an iterative approach.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": [2, 3],\r\n        \"expected_output\": 8\r\n    },\r\n    {\r\n        \"input\": [5, 0],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [7, 2],\r\n        \"expected_output\": 49\r\n    },\r\n    {\r\n        \"input\": [3, 3],\r\n        \"expected_output\": 27\r\n    },\r\n    {\r\n        \"input\": [10, 1],\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": [0, 5],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [4, 4],\r\n        \"expected_output\": 256\r\n    },\r\n    {\r\n        \"input\": [2, 5],\r\n        \"expected_output\": 32\r\n    },\r\n    {\r\n        \"input\": [5, 2],\r\n        \"expected_output\": 25\r\n    },\r\n    {\r\n        \"input\": [1, 100],\r\n        \"expected_output\": 1\r\n    }\r\n]"}, {"id": "166", "title": "Count Words in a String", "description": "Write a function that counts the number of words in a given string.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"Hello World\",\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": \"This is a test\",\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": \"SingleWord\",\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": \"\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"   Leading spaces\",\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": \"Trailing spaces   \",\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": \"  Multiple   spaces  in  between  \",\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": \"One Two Three Four Five\",\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": \"Word Count Test\",\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": \"C programming language\",\r\n        \"expected_output\": 3\r\n    }\r\n]"}, {"id": "165", "title": "Count Digits in a Number", "description": "Write a function that counts the number of digits in a given number.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": 12345,\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": -9876,\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": 999999,\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": 5000,\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": -1,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 1234567890,\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": 12,\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": -45,\r\n        \"expected_output\": 2\r\n    }\r\n]"}, {"id": "164", "title": "Find Second Smallest Number", "description": "Write a function that finds the second smallest number in an array.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [5, 3, 1, 4, 2],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [-1, -2, -3, -4],\r\n        \"expected_output\": -2\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [2, 2, 2],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [5, 1, 1, 2],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [100, 90, 80, 70],\r\n        \"expected_output\": 90\r\n    },\r\n    {\r\n        \"input\": [0, 1, 0, 1],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [10, 2, 8, 6],\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": [7, 5, 3, 5, 1],\r\n        \"expected_output\": 3\r\n    }\r\n]"}, {"id": "163", "title": "Merge Two Sorted Arrays", "description": "Write a function that merges two sorted arrays into a single sorted array.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": [[1, 3, 5], [2, 4, 6]],\r\n        \"expected_output\": [1, 2, 3, 4, 5, 6]\r\n    },\r\n    {\r\n        \"input\": [[10, 20], [5, 15]],\r\n        \"expected_output\": [5, 10, 15, 20]\r\n    },\r\n    {\r\n        \"input\": [[], []],\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"input\": [[1, 2, 3], []],\r\n        \"expected_output\": [1, 2, 3]\r\n    },\r\n    {\r\n        \"input\": [[4, 5, 6], [1, 2, 3]],\r\n        \"expected_output\": [1, 2, 3, 4, 5, 6]\r\n    },\r\n    {\r\n        \"input\": [[0, 0, 1], [0, 0, 1]],\r\n        \"expected_output\": [0, 0, 0, 0, 1, 1]\r\n    },\r\n    {\r\n        \"input\": [[7, 8, 9], [1, 2, 3]],\r\n        \"expected_output\": [1, 2, 3, 7, 8, 9]\r\n    },\r\n    {\r\n        \"input\": [[10, 20, 30], [5, 15, 25]],\r\n        \"expected_output\": [5, 10, 15, 20, 25, 30]\r\n    },\r\n    {\r\n        \"input\": [[-1, 0, 1], [-2, -1, 0]],\r\n        \"expected_output\": [-2, -1, -1, 0, 0, 1]\r\n    },\r\n    {\r\n        \"input\": [[1, 2, 3, 4], [5, 6, 7, 8]],\r\n        \"expected_output\": [1, 2, 3, 4, 5, 6, 7, 8]\r\n    }\r\n]"}, {"id": "162", "title": "Find GCD of Array", "description": "Write a function that finds the GCD of an array of integers.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": [12, 15, 21],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30],\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": [3, 9, 27],\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": [5, 10, 15],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [8, 16, 32],\r\n        \"expected_output\": 8\r\n    },\r\n    {\r\n        \"input\": [17, 34, 51],\r\n        \"expected_output\": 17\r\n    },\r\n    {\r\n        \"input\": [2, 4, 6, 8],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [28, 42, 70],\r\n        \"expected_output\": 14\r\n    },\r\n    {\r\n        \"input\": [9, 27, 81],\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": [48, 64, 80],\r\n        \"expected_output\": 16\r\n    }\r\n]"}, {"id": "161", "title": "Check for Even Number", "description": "Write a function that checks if a given number is even.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 3,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": -4,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": -3,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 101,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 50,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 51,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 102,\r\n        \"expected_output\": true\r\n    }\r\n]"}, {"id": "160", "title": "Find Maximum in Array", "description": "Write a function that finds the maximum element in an array of integers.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [-1, -2, -3, -4],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [0],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [5, 10, 15, 20],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [100, 90, 80, 70],\r\n        \"expected_output\": 100\r\n    },\r\n    {\r\n        \"input\": [3, 1, 4, 1, 5, 9, 2, 6],\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30, 40, 50],\r\n        \"expected_output\": 50\r\n    },\r\n    {\r\n        \"input\": [6, 7, 8, 9],\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": [-5, -4, -3, -2, -1],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [8, 8, 8, 8],\r\n        \"expected_output\": 8\r\n    }\r\n]"}, {"id": "159", "title": "Bubble Sort", "description": "Write a function that sorts an array of integers using the bubble sort algorithm.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": [5, 2, 9, 1, 5, 6],\r\n        \"expected_output\": [1, 2, 5, 5, 6, 9]\r\n    },\r\n    {\r\n        \"input\": [3, 0, -2, 5, -1],\r\n        \"expected_output\": [-2, -1, 0, 3, 5]\r\n    },\r\n    {\r\n        \"input\": [1],\r\n        \"expected_output\": [1]\r\n    },\r\n    {\r\n        \"input\": [],\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"input\": [10, 9, 8, 7, 6],\r\n        \"expected_output\": [6, 7, 8, 9, 10]\r\n    },\r\n    {\r\n        \"input\": [2, 1],\r\n        \"expected_output\": [1, 2]\r\n    },\r\n    {\r\n        \"input\": [10, 2, 3, 4],\r\n        \"expected_output\": [2, 3, 4, 10]\r\n    },\r\n    {\r\n        \"input\": [5, 1, 4, 2, 8],\r\n        \"expected_output\": [1, 2, 4, 5, 8]\r\n    },\r\n    {\r\n        \"input\": [12, 11, 13, 5, 6],\r\n        \"expected_output\": [5, 6, 11, 12, 13]\r\n    },\r\n    {\r\n        \"input\": [7, 5, 3, 5, 1],\r\n        \"expected_output\": [1, 3, 5, 5, 7]\r\n    }\r\n]"}, {"id": "158", "title": "Find Length of String", "description": "Write a function that returns the length of a given string.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": \"OpenAI\",\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": \"\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"a\",\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": \"abcdefg\",\r\n        \"expected_output\": 7\r\n    },\r\n    {\r\n        \"input\": \"The quick brown fox\",\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": \"C programming language\",\r\n        \"expected_output\": 24\r\n    },\r\n    {\r\n        \"input\": \"Whitespace   Test\",\r\n        \"expected_output\": 18\r\n    },\r\n    {\r\n        \"input\": \"Length Test!\",\r\n        \"expected_output\": 13\r\n    },\r\n    {\r\n        \"input\": \"Testing\",\r\n        \"expected_output\": 7\r\n    }\r\n]"}, {"id": "157", "title": "Count Vowels in a String", "description": "Write a function that counts the number of vowels in a given string.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": \"OpenAI\",\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": \"sky\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"aeiou\",\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": \"ABCDEFG\",\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": \"The quick brown fox jumps over the lazy dog\",\r\n        \"expected_output\": 11\r\n    },\r\n    {\r\n        \"input\": \"\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"aaeeiou\",\r\n        \"expected_output\": 7\r\n    },\r\n    {\r\n        \"input\": \"A string without vowels\",\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": \"An Example with Some Vowels\",\r\n        \"expected_output\": 9\r\n    }\r\n]"}, {"id": "156", "title": "Reverse a String", "description": "Write a program that reverses a given string.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": \"olleh\"\r\n    },\r\n    {\r\n        \"input\": \"OpenAI\",\r\n        \"expected_output\": \"IAnepO\"\r\n    },\r\n    {\r\n        \"input\": \"racecar\",\r\n        \"expected_output\": \"racecar\"\r\n    },\r\n    {\r\n        \"input\": \"12345\",\r\n        \"expected_output\": \"54321\"\r\n    },\r\n    {\r\n        \"input\": \"c programming\",\r\n        \"expected_output\": \"gnimmargorp c\"\r\n    },\r\n    {\r\n        \"input\": \"A man, a plan, a canal, Panama!\",\r\n        \"expected_output\": \"!amanaP ,lanac ,nalp a ,nam A\"\r\n    },\r\n    {\r\n        \"input\": \"\",\r\n        \"expected_output\": \"\"\r\n    },\r\n    {\r\n        \"input\": \"abcdefg\",\r\n        \"expected_output\": \"gfedcba\"\r\n    },\r\n    {\r\n        \"input\": \"the quick brown fox\",\r\n        \"expected_output\": \"xof nworb kciuq eht\"\r\n    },\r\n    {\r\n        \"input\": \"Madam\",\r\n        \"expected_output\": \"madaM\"\r\n    }\r\n]"}, {"id": "155", "title": "Check for Armstrong Number", "description": "Write a function that checks whether a number is an Armstrong number.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": 153,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 9474,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 123,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 370,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 371,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 407,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 1000,\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "154", "title": "Convert Celsius to Kelvin", "description": "Write a program that converts temperature from Celsius to Kelvin.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 273.15\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": 373.15\r\n    },\r\n    {\r\n        \"input\": -40,\r\n        \"expected_output\": 233.15\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": 298.15\r\n    },\r\n    {\r\n        \"input\": 37,\r\n        \"expected_output\": 310.15\r\n    },\r\n    {\r\n        \"input\": 50,\r\n        \"expected_output\": 323.15\r\n    },\r\n    {\r\n        \"input\": -10,\r\n        \"expected_output\": 263.15\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": 288.15\r\n    },\r\n    {\r\n        \"input\": 1000,\r\n        \"expected_output\": 1273.15\r\n    },\r\n    {\r\n        \"input\": -273.15,\r\n        \"expected_output\": 0\r\n    }\r\n]"}, {"id": "153", "title": "Check Prime Number", "description": "Write a function that checks if a number is prime.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 4,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 17,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 18,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 19,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 23,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 29,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 30,\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "150", "title": "Retrieve All Students with Their Grades", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to retrieve all students along with their grades.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'C'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, grade FROM students;\",\r\n        \"expected_output\": [[\"Alice\", \"A\"], [\"Bob\", \"B\"], [\"Charlie\", \"C\"], [\"David\", \"A\"], [\"Eve\", \"A\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT id, name, grade FROM students ORDER BY grade;\",\r\n        \"expected_output\": [[1, 'Alice', 'A'], [4, 'David', 'A'], [5, 'Eve', 'A'], [2, 'Bob', 'B'], [3, 'Charlie', 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT DISTINCT grade FROM students;\",\r\n        \"expected_output\": [[\"A\"], [\"B\"], [\"C\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id IN (1, 3, 5);\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE id > 2 ORDER BY grade;\",\r\n        \"expected_output\": [[\"Charlie\"], [\"Bob\"], [\"David\"], [\"Eve\"], [\"Alice\"]]\r\n    }\r\n]"}, {"id": "149", "title": "Count Total Students in Each Grade", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to calculate the total number of students for each grade.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) AS total_students FROM students GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 3], [\"B\", 2], [\"C\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade FROM students GROUP BY grade ORDER BY total_students DESC;\",\r\n        \"expected_output\": [[\"A\"], [\"B\"], [\"C\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE age > 18 GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 2], [\"B\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE age < 20 GROUP BY grade;\",\r\n        \"expected_output\": [[\"B\", 1], [\"A\", 2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE grade NOT IN ('C') GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 3], [\"B\", 2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(DISTINCT grade) FROM students;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE grade IN ('A', 'B') GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 3], [\"B\", 2]]\r\n    }\r\n]"}, {"id": "148", "title": "List Students Ordered by Age and Grade", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to list all students ordered first by age and then by grade.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY age ASC, grade ASC;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'A'], [3, 'Charlie', 19, 'C'], [1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY grade ASC, age DESC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A'], [2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY age DESC;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A'], [1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'A'], [2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY age ASC;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'A'], [3, 'Charlie', 19, 'C'], [1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age > 18 ORDER BY grade DESC;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A'], [1, 'Alice', 20, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' ORDER BY age DESC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age < 20 ORDER BY grade ASC;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade != 'C' ORDER BY age ASC;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'A'], [1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY id ASC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'C'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY name ASC, age ASC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [2, 'Bob', 17, 'B'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A'], [3, 'Charlie', 19, 'C']]\r\n    }\r\n]"}, {"id": "147", "title": "Find Students with Name Containing 'e' or 'a'", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to find all students whose names contain either the letter 'e' or 'a'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' OR name LIKE '%a%';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [2, 'Bob', 17, 'B'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name LIKE '%e%' OR name LIKE '%a%';\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE name LIKE '%e%' OR name LIKE '%a%';\",\r\n        \"expected_output\": [[\"Alice\"], [\"Bob\"], [\"David\"], [\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND age > 18;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%a%' AND age < 20;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%a%' AND id < 4;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND id > 3;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND age BETWEEN 17 AND 20;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%a%' AND age IN (18, 22);\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A'], [4, 'David', 22, 'A']]\r\n    }\r\n]"}, {"id": "146", "title": "List Students by Age Group", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to group students by age.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) AS total_students FROM students GROUP BY age ORDER BY age;\",\r\n        \"expected_output\": [[17, 1], [18, 2], [19, 1], [20, 1], [22, 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age FROM students GROUP BY age;\",\r\n        \"expected_output\": [[17], [18], [19], [20], [22]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students WHERE grade = 'A' GROUP BY age;\",\r\n        \"expected_output\": [[20, 1], [22, 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students WHERE grade = 'B' GROUP BY age;\",\r\n        \"expected_output\": [[17, 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students WHERE age > 18 GROUP BY age;\",\r\n        \"expected_output\": [[19, 1], [20, 1], [22, 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students WHERE age < 20 GROUP BY age;\",\r\n        \"expected_output\": [[17, 1], [18, 2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students WHERE age BETWEEN 17 AND 22 GROUP BY age;\",\r\n        \"expected_output\": [[17, 1], [18, 2], [19, 1], [20, 1], [22, 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students WHERE age NOT IN (17, 18) GROUP BY age;\",\r\n        \"expected_output\": [[19, 1], [20, 1], [22, 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age FROM students WHERE age IN (18, 19);\",\r\n        \"expected_output\": [[18], [19]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age < 19;\",\r\n        \"expected_output\": [[3]]\r\n    }\r\n]"}, {"id": "145", "title": "Find Students with Specific Grades", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students with grades 'A' and 'C'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade IN ('A', 'C');\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A'], [3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade IN ('A', 'C');\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade IN ('A', 'C');\",\r\n        \"expected_output\": [[\"Alice\"], [\"David\"], [\"Charlie\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND age > 19;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'C' AND age < 20;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade NOT IN ('A', 'C');\",\r\n        \"expected_output\": [[\"Bob\"], [\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND id < 4;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade IN ('B', 'C');\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade IN ('A', 'B') ORDER BY name ASC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [2, 'Bob', 17, 'B'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    }\r\n]"}, {"id": "144", "title": "Check Number of Students in Each Age Group", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to count students in each age group.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students GROUP BY age;\",\r\n        \"expected_output\": [[17, 1], [18, 2], [19, 1], [20, 1], [22, 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age FROM students GROUP BY age ORDER BY age ASC;\",\r\n        \"expected_output\": [[17], [18], [19], [20], [22]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age < 18;\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age BETWEEN 18 AND 22;\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 20;\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students WHERE age < 20 GROUP BY age;\",\r\n        \"expected_output\": [[17, 1], [18, 2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age FROM students GROUP BY age HAVING COUNT(*) > 1;\",\r\n        \"expected_output\": [[18]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students WHERE grade = 'B' GROUP BY age;\",\r\n        \"expected_output\": [[17, 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students WHERE grade = 'A' GROUP BY age;\",\r\n        \"expected_output\": [[20, 1], [22, 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students WHERE age NOT IN (17, 18) GROUP BY age;\",\r\n        \"expected_output\": [[19, 1], [20, 1], [22, 1]]\r\n    }\r\n]"}, {"id": "143", "title": "Calculate Total Age of Students in Grade A", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to calculate the total age of students who are in grade 'A'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[60]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[35]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE grade IN ('A', 'B');\",\r\n        \"expected_output\": [[95]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[19]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE age > 20;\",\r\n        \"expected_output\": [[42]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE age < 20;\",\r\n        \"expected_output\": [[35]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE age BETWEEN 17 AND 19;\",\r\n        \"expected_output\": [[54]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE id < 3;\",\r\n        \"expected_output\": [[37]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE grade = 'A' AND age > 19;\",\r\n        \"expected_output\": [[40]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE grade = 'B' AND age < 20;\",\r\n        \"expected_output\": [[17]]\r\n    }\r\n]"}, {"id": "142", "title": "Group Students by Grade and Count Them", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to count students in each grade.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) AS total_students FROM students GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 3], [\"B\", 2], [\"C\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade FROM students GROUP BY grade ORDER BY total_students DESC;\",\r\n        \"expected_output\": [[\"A\"], [\"B\"], [\"C\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE age > 18 GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 2], [\"B\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) AS total_students FROM students WHERE id < 4 GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 1], [\"B\", 1], [\"C\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade FROM students GROUP BY grade HAVING COUNT(*) > 1;\",\r\n        \"expected_output\": [[\"A\"], [\"B\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) AS total_students FROM students WHERE name LIKE 'D%' GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(DISTINCT grade) FROM students;\",\r\n        \"expected_output\": [[3]]\r\n    }\r\n]"}, {"id": "141", "title": "Find Students with Multiple Names Containing 'e'", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to find students whose names contain the letter 'e' and are in grade 'A'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name LIKE '%e%' AND grade = 'A';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE name LIKE '%e%' AND grade = 'A';\",\r\n        \"expected_output\": [[\"Alice\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND age > 19 AND grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND id < 5 AND grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND grade IN ('A', 'B');\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND grade != 'C';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE name LIKE '%e%' AND age BETWEEN 18 AND 22;\",\r\n        \"expected_output\": [[\"Alice\"], [\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND grade = 'B' AND age = 18;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND age < 20;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    }\r\n]"}, {"id": "140", "title": "Check if a Student Exists by Name", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to check if a student named 'Alice' exists.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT EXISTS(SELECT * FROM students WHERE name = 'Alice');\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT EXISTS(SELECT * FROM students WHERE name = 'Bob');\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT EXISTS(SELECT * FROM students WHERE name = 'Charlie');\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT EXISTS(SELECT * FROM students WHERE name = 'David');\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT EXISTS(SELECT * FROM students WHERE name = 'Eve');\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT EXISTS(SELECT * FROM students WHERE name = 'Frank');\",\r\n        \"expected_output\": [[0]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT EXISTS(SELECT * FROM students WHERE name = 'Nonexistent');\",\r\n        \"expected_output\": [[0]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT EXISTS(SELECT * FROM students WHERE age = 20);\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT EXISTS(SELECT * FROM students WHERE age > 22);\",\r\n        \"expected_output\": [[0]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT EXISTS(SELECT * FROM students WHERE grade = 'B');\",\r\n        \"expected_output\": [[3]]\r\n    }\r\n]"}, {"id": "139", "title": "Count Students with Age Above 19", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to count all students who are older than 19.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 19;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age >= 20;\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 21;\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age < 20;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age IN (20, 21, 22);\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age BETWEEN 18 AND 22;\",\r\n        \"expected_output\": [[5]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age NOT IN (17, 18);\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 19 AND grade = 'A';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 19 AND id <= 4;\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 19 AND name LIKE 'D%';\",\r\n        \"expected_output\": [[1]]\r\n    }\r\n]"}, {"id": "138", "title": "List Students with Names Containing 'a'", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to find all students whose names contain the letter 'a'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%a%';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name LIKE '%a%';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE name LIKE '%a%';\",\r\n        \"expected_output\": [[\"Alice\"], [\"David\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%a%' AND age > 18;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%a%' AND id < 5;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%a%' AND grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%a%' AND age BETWEEN 18 AND 22;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%a%' AND grade != 'B';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE name LIKE '%a%' ORDER BY name ASC;\",\r\n        \"expected_output\": [[\"Alice\"], [\"David\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%a%' AND age < 21;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    }\r\n]"}, {"id": "137", "title": "List Students with Names Starting with 'A'", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to find all students whose names start with the letter 'A'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE 'A%';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name LIKE 'A%';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE name LIKE 'A%';\",\r\n        \"expected_output\": [[\"Alice\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE 'A%' AND grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE 'A%' AND age > 19;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE 'A%' AND age < 21;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE 'A%' AND id < 2;\",\r\n        \"expected_output\": [[]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE 'A%' AND id > 0;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE name LIKE 'A%' ORDER BY name ASC;\",\r\n        \"expected_output\": [[\"Alice\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE 'A%' AND grade != 'B';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    }\r\n]"}, {"id": "136", "title": "Find Students Who Are Not in Grade A", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to find all students who are not in grade 'A'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade != 'A';\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade != 'A';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade != 'A';\",\r\n        \"expected_output\": [[\"Bob\"], [\"Charlie\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade IN ('B', 'C');\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade NOT IN ('A');\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade NOT LIKE 'A%';\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade != 'A' ORDER BY name ASC;\",\r\n        \"expected_output\": [[\"Bob\"], [\"Charlie\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade NOT IN ('A', 'C');\",\r\n        \"expected_output\": [[2]]\r\n    }\r\n]"}, {"id": "135", "title": "Find Students with Age 18 and Grade A", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to find all students who are 18 years old and have grade 'A'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 18 AND grade = 'A';\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age = 18 AND grade = 'A';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age = 18 AND grade = 'A';\",\r\n        \"expected_output\": [[\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 18 AND grade IN ('A', 'B');\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 18 AND id < 6;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 18 AND id > 3;\",\r\n        \"expected_output\": [[]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 18 AND name LIKE 'E%';\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 18 AND grade = 'B';\",\r\n        \"expected_output\": [[]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 18 AND grade != 'B';\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 18 AND id IN (5);\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    }\r\n]"}, {"id": "134", "title": "Average Age of Students", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to calculate the average age of students.", "language": "mysql", "test_cases": "[\r\n   , {\r\n        \"query\": \"SELECT AVG(age) FROM students;\",\r\n        \"expected_output\": [[16]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[21]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[18]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE age > 18;\",\r\n        \"expected_output\": [[20]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE age < 20;\",\r\n        \"expected_output\": [[18]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE id < 4;\",\r\n        \"expected_output\": [[19]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE id IN (1, 2, 3);\",\r\n        \"expected_output\": [[18]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE id NOT IN (1, 2);\",\r\n        \"expected_output\": [[19]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE age BETWEEN 17 AND 20;\",\r\n        \"expected_output\": [[19]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE grade IN ('A', 'B');\",\r\n        \"expected_output\": [[19]]\r\n    }\r\n]"}, {"id": "133", "title": "List Students by Grade", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students and order them by grade.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY grade ASC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A'], [2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students ORDER BY grade ASC;\",\r\n        \"expected_output\": [[6]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students ORDER BY grade ASC;\",\r\n        \"expected_output\": [[\"Alice\"], [\"David\"], [\"Eve\"], [\"Bob\"], [\"Charlie\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY grade DESC;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'C'], [1, 'Alice', 20, 'A'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' ORDER BY name ASC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' ORDER BY age ASC;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[\"Charlie\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade IN ('A', 'B');\",\r\n        \"expected_output\": [[\"Alice\"], [\"David\"], [\"Eve\"], [\"Bob\"]]\r\n    }\r\n]"}, {"id": "132", "title": "List All Students with Even IDs", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students with even IDs.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id % 2 = 0;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE id % 2 = 0;\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE id % 2 = 0;\",\r\n        \"expected_output\": [[\"Bob\"], [\"David\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id IN (2, 4);\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id < 5 AND id % 2 = 0;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id % 2 = 0 ORDER BY age ASC;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id BETWEEN 1 AND 4 AND id % 2 = 0;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE id % 2 = 0 AND grade = 'A';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE id % 2 = 0 AND age > 18;\",\r\n        \"expected_output\": [[\"David\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id > 2 AND id % 2 = 0;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A']]\r\n    }\r\n]"}, {"id": "131", "title": "Find Students with Odd IDs", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students with odd IDs.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id % 2 = 1;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE id % 2 = 1;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE id % 2 = 1;\",\r\n        \"expected_output\": [[\"Alice\"], [\"Charlie\"], [\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id IN (1, 3, 5);\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id < 4 AND id % 2 = 1;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id % 2 != 0;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id > 2 AND id % 2 = 1;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE id % 2 != 0;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id BETWEEN 1 AND 5 AND id % 2 = 1;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE id % 2 = 1 ORDER BY name ASC;\",\r\n        \"expected_output\": [[\"Alice\"], [\"Charlie\"], [\"Eve\"]]\r\n    }\r\n]"}, {"id": "130", "title": "List All Students with Age Below 18", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students who are younger than 18.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age < 18;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age < 18;\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age < 18;\",\r\n        \"expected_output\": [[\"Bob\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age <= 17;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age IN (16, 17);\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age < 20;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age < 18 AND grade = 'B';\",\r\n        \"expected_output\": [[\"Bob\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age BETWEEN 15 AND 18;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age < 19;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age < 18 AND grade = 'A';\",\r\n        \"expected_output\": [[]]\r\n    }\r\n]"}, {"id": "129", "title": "Find Students with Grade B and Age Above 18", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to find all students who have a grade of 'B' and are older than 18.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND age > 18;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'B' AND age > 18;\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade = 'B' AND age > 18;\",\r\n        \"expected_output\": [[\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND age >= 18;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND age < 22;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND name LIKE 'E%';\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND id > 1;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND age BETWEEN 18 AND 20;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND id < 6;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND age IN (18);\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    }\r\n]"}, {"id": "128", "title": "Delete a Student by ID", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to delete the student with id 2.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"DELETE FROM students WHERE id = 2;\",\r\n        \"expected_output\": [[\"1 row(s) affected\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students;\",\r\n        \"expected_output\": [[5]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id = 2;\",\r\n        \"expected_output\": [[]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE id < 3;\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"DELETE FROM students WHERE name = 'Bob';\",\r\n        \"expected_output\": [[\"1 row(s) affected\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name = 'Bob';\",\r\n        \"expected_output\": [[0]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id IN (1, 2, 3);\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C']]\r\n    }\r\n]"}, {"id": "127", "title": "Update Student Grade", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to update the grade of the student with id 5 to 'A'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"UPDATE students SET grade = 'A' WHERE id = 5;\",\r\n        \"expected_output\": [[\"1 row(s) affected\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id = 5;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id = 5 AND grade = 'A';\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"UPDATE students SET grade = 'C' WHERE id = 3;\",\r\n        \"expected_output\": [[\"1 row(s) affected\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id = 3;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[\"Alice\"], [\"David\"], [\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[\"Bob\"]]\r\n    }\r\n]"}, {"id": "126", "title": "Count Total Students in Database", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to count the total number of students in the database.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students;\",\r\n        \"expected_output\": [[6]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 18;\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age < 20;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name LIKE 'A%';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE id BETWEEN 1 AND 3;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE id NOT IN (1, 2);\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(DISTINCT grade) FROM students;\",\r\n        \"expected_output\": [[3]]\r\n    }\r\n]"}, {"id": "125", "title": "Calculate the Sum of All Ages", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to calculate the sum of all students' ages.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students;\",\r\n        \"expected_output\": [[96]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[42]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[35]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE age > 18;\",\r\n        \"expected_output\": [[62]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students;\",\r\n        \"expected_output\": [[6]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students;\",\r\n        \"expected_output\": [[16]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT MIN(age) FROM students;\",\r\n        \"expected_output\": [[17]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT MAX(age) FROM students;\",\r\n        \"expected_output\": [[22]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE id <= 3;\",\r\n        \"expected_output\": [[56]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT SUM(age) FROM students WHERE id > 2;\",\r\n        \"expected_output\": [[40]]\r\n    }\r\n]"}, {"id": "124", "title": "Find Students by Specific Age", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students of a specific age.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 18;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age = 18;\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age = 18;\",\r\n        \"expected_output\": [[\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 19;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 17;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 20;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 22;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age = 17;\",\r\n        \"expected_output\": [[\"Bob\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age = 22;\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age IN (17, 18);\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'B']]\r\n    }\r\n]"}, {"id": "123", "title": "Find the Youngest Student", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to find the student with the lowest age.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY age ASC LIMIT 1;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students ORDER BY age ASC LIMIT 1;\",\r\n        \"expected_output\": [[\"Bob\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age FROM students ORDER BY age ASC LIMIT 1;\",\r\n        \"expected_output\": [[17]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, age FROM students ORDER BY age ASC LIMIT 1;\",\r\n        \"expected_output\": [[\"Bob\", 17]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = (SELECT MIN(age) FROM students);\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age = (SELECT MIN(age) FROM students);\",\r\n        \"expected_output\": [[\"Bob\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age <= 17;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 17;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age = 17;\",\r\n        \"expected_output\": [[\"Bob\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY age ASC, name ASC LIMIT 1;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    }\r\n]"}, {"id": "122", "title": "Calculate Total Number of Students in Each Grade", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to calculate the total number of students for each grade.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) AS total_students FROM students GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 2], [\"B\", 3], [\"C\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade FROM students GROUP BY grade ORDER BY grade ASC;\",\r\n        \"expected_output\": [[\"A\"], [\"B\"], [\"C\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM (SELECT grade, COUNT(*) AS total_students FROM students GROUP BY grade) AS sub;\",\r\n        \"expected_output\": [[\"A\", 2], [\"B\", 3], [\"C\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students GROUP BY grade HAVING COUNT(*) > 0;\",\r\n        \"expected_output\": [[\"A\", 2], [\"B\", 3], [\"C\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) AS total_students FROM students WHERE age > 18 GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 2], [\"B\", 2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) AS total_students FROM students WHERE id > 2 GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 2], [\"B\", 2], [\"C\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) AS total_students FROM students GROUP BY grade ORDER BY total_students DESC;\",\r\n        \"expected_output\": [[\"B\", 3], [\"A\", 2], [\"C\", 1]]\r\n    }\r\n]"}, {"id": "121", "title": "Find Students with Grade 'A' and Age Greater Than 18", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to find all students who have a grade of 'A' and are older than 18.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND age > 18;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'A' AND age > 18;\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade = 'A' AND age > 18;\",\r\n        \"expected_output\": [[\"Alice\"], [\"David\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND age > 20;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND name LIKE 'A%';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND age < 22;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND id > 1;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' ORDER BY age DESC;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A'], [1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND age BETWEEN 19 AND 22;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND id < 5;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    }\r\n]"}, {"id": "120", "title": "Add a New Student", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to insert a new student named 'Frank', aged 21, with grade 'B'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"INSERT INTO students (name, age, grade) VALUES ('Frank', 21, 'B');\",\r\n        \"expected_output\": [[\"1 row(s) affected\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'C'], [4, 'David', 22, 'A'], [5, 'Eve', 18, 'B'], [6, 'Frank', 21, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name = 'Frank';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 21;\",\r\n        \"expected_output\": [[6, 'Frank', 21, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND age = 21;\",\r\n        \"expected_output\": [[6, 'Frank', 21, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE id = 6;\",\r\n        \"expected_output\": [[\"Frank\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age FROM students WHERE name = 'Frank';\",\r\n        \"expected_output\": [[21]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade FROM students WHERE id = 6;\",\r\n        \"expected_output\": [[\"B\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 20;\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' ORDER BY name ASC;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'B'], [6, 'Frank', 21, 'B']]\r\n    }\r\n]"}, {"id": "119", "title": "Find Students Grouped by Age", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to count how many students are in each age group.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students GROUP BY age;\",\r\n        \"expected_output\": [[17, 1], [18, 1], [19, 1], [20, 1], [22, 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age FROM students GROUP BY age;\",\r\n        \"expected_output\": [[17], [18], [19], [20], [22]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age, COUNT(*) FROM students GROUP BY age ORDER BY age ASC;\",\r\n        \"expected_output\": [[17, 1], [18, 1], [19, 1], [20, 1], [22, 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age = 17;\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age = 19;\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age BETWEEN 18 AND 22;\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age FROM students GROUP BY age ORDER BY age DESC;\",\r\n        \"expected_output\": [[22], [20], [19], [18], [17]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 18;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 22;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age = 19;\",\r\n        \"expected_output\": [[\"Charlie\"]]\r\n    }\r\n]"}, {"id": "118", "title": "Find the Oldest Student", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to find the student with the highest age.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY age DESC LIMIT 1;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students ORDER BY age DESC LIMIT 1;\",\r\n        \"expected_output\": [[\"David\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age FROM students ORDER BY age DESC LIMIT 1;\",\r\n        \"expected_output\": [[22]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, age FROM students ORDER BY age DESC LIMIT 1;\",\r\n        \"expected_output\": [[\"David\", 22]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = (SELECT MAX(age) FROM students);\",\r\n        \"expected_output\": [[4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age = (SELECT MAX(age) FROM students);\",\r\n        \"expected_output\": [[\"David\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age >= 22;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age = 22;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age = 22;\",\r\n        \"expected_output\": [[\"David\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY age DESC, name ASC LIMIT 1;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A']]\r\n    }\r\n]"}, {"id": "117", "title": "Find Students by Name Containing 'e'", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students whose names contain the letter 'e'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE name LIKE '%e%';\",\r\n        \"expected_output\": [[\"Alice\"], [\"Charlie\"], [\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name LIKE '%e%';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' ORDER BY name ASC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' ORDER BY age DESC;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C'], [1, 'Alice', 20, 'A'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, age FROM students WHERE name LIKE '%e%';\",\r\n        \"expected_output\": [[\"Alice\", 20], [\"Charlie\", 19], [\"Eve\", 18]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND age > 18;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND id > 2;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE '%e%' AND age = 18;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'B']]\r\n    }\r\n]"}, {"id": "116", "title": "Find Students with Grade C", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students with grade 'C'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[\"Charlie\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'C' AND age > 18;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'C' ORDER BY name ASC;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT id FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'C' AND id > 2;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'C' AND id = 3;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'C' AND name LIKE '%a%';\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'C' AND age BETWEEN 18 AND 20;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    }\r\n]"}, {"id": "115", "title": "Delete Student with Specific ID", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to delete the student with id 4.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"DELETE FROM students WHERE id = 4;\",\r\n        \"expected_output\": [[\"1 row(s) affected\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id = 4;\",\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'A'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students;\",\r\n        \"expected_output\": [[\"Alice\"], [\"Bob\"], [\"Charlie\"], [\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT id FROM students WHERE name LIKE '%e%';\",\r\n        \"expected_output\": [[1], [5]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 18;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY name ASC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'A'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE id < 4;\",\r\n        \"expected_output\": [[\"Alice\"], [\"Bob\"]]\r\n    }\r\n]"}, {"id": "114", "title": "Update Student Grade", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to update the grade of the student with id 3 to 'A'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"UPDATE students SET grade = 'A' WHERE id = 3;\",\r\n        \"expected_output\": [[\"1 row(s) affected\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id = 3;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, grade FROM students WHERE id = 3;\",\r\n        \"expected_output\": [[\"Charlie\", \"A\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade FROM students WHERE id = 3;\",\r\n        \"expected_output\": [[\"A\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id = 3 AND grade = 'A';\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE id = 3 AND grade = 'A';\",\r\n        \"expected_output\": [[\"Charlie\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id = 3 AND name LIKE '%a%';\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE id = 3 AND age > 18;\",\r\n        \"expected_output\": [[\"Charlie\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE id = 3 AND age = 19;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE id = 3 AND age = 19;\",\r\n        \"expected_output\": [[\"Charlie\"]]\r\n    }\r\n]"}, {"id": "113", "title": "Find Students Younger Than 19", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students younger than 19 years old.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age < 19;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age < 19;\",\r\n        \"expected_output\": [[\"Bob\"], [\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age < 19;\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age < 19 ORDER BY name ASC;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age < 19 ORDER BY age DESC;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'B'], [2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age < 19 AND grade = 'B';\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age < 19 AND grade = 'B';\",\r\n        \"expected_output\": [[\"Bob\"], [\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age < 19 AND name LIKE '%e%';\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age < 19 ORDER BY name DESC;\",\r\n        \"expected_output\": [[\"Eve\"], [\"Bob\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age < 19 AND id > 1;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'B']]\r\n    }\r\n]"}, {"id": "112", "title": "Find Students with Grade B or C", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students with grade 'B' or 'C'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade IN ('B', 'C');\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade IN ('B', 'C');\",\r\n        \"expected_output\": [[\"Bob\"], [\"Charlie\"], [\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade IN ('B', 'C');\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade IN ('B', 'C') ORDER BY age DESC;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'B'], [2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade IN ('B', 'C') AND age > 18;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade IN ('B', 'C') AND name LIKE '%e%';\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade IN ('B', 'C') AND name LIKE '%a%';\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade IN ('B', 'C') ORDER BY name ASC;\",\r\n        \"expected_output\": [[\"Bob\"], [\"Charlie\"], [\"Eve\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade IN ('B', 'C') ORDER BY name DESC;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'B'], [3, 'Charlie', 19, 'C'], [2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade IN ('B', 'C') AND id > 2;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'B']]\r\n    }\r\n]"}, {"id": "111", "title": "Count Students by Grade", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to count how many students are in each grade.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 2], [\"B\", 2], [\"C\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE age > 18 GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 2], [\"C\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE age < 20 GROUP BY grade;\",\r\n        \"expected_output\": [[\"B\", 2], [\"C\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE name LIKE '%e%' GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 1], [\"B\", 2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE name LIKE '%a%' GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE id > 2 GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 1], [\"B\", 2], [\"C\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE id < 4 GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 1], [\"B\", 1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE grade = 'A' OR grade = 'B' GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 2], [\"B\", 2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE grade != 'C' GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 2], [\"B\", 2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT grade, COUNT(*) FROM students WHERE name LIKE '%e%' OR name LIKE '%a%' GROUP BY grade;\",\r\n        \"expected_output\": [[\"A\", 1], [\"B\", 2]]\r\n    }\r\n]"}, {"id": "110", "title": "Calculate Average Age of Students", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to calculate the average age of all students.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students;\",\r\n        \"expected_output\": [[19.2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[21.0]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE age > 18;\",\r\n        \"expected_output\": [[20.33]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE name LIKE 'A%';\",\r\n        \"expected_output\": [[20.0]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[17.5]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE age < 20;\",\r\n        \"expected_output\": [[18.33]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE age BETWEEN 18 AND 22;\",\r\n        \"expected_output\": [[19.5]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE name LIKE '%e%';\",\r\n        \"expected_output\": [[19.67]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE grade IN ('A', 'B');\",\r\n        \"expected_output\": [[19.75]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT AVG(age) FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[19.0]]\r\n    }\r\n]"}, {"id": "109", "title": "Find Students by Grade and Sort by Name", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students with grade 'B' and sort them by name in descending order.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' ORDER BY name DESC;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'B'], [2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade = 'B' ORDER BY name DESC;\",\r\n        \"expected_output\": [[\"Eve\"], [\"Bob\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'B';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' ORDER BY age DESC;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'B'], [2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND name LIKE '%e%';\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND age > 18;\",\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND age < 18;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' AND id > 1 ORDER BY name ASC;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT id, name FROM students WHERE grade = 'B' ORDER BY name ASC;\",\r\n        \"expected_output\": [[2, 'Bob'], [5, 'Eve']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade = 'B' AND age > 17;\",\r\n        \"expected_output\": [[\"Eve\"]]\r\n    }\r\n]"}, {"id": "108", "title": "Find Students Between Ages 18 and 21", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students whose age is between 18 and 21.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age BETWEEN 18 AND 21;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, age FROM students WHERE age BETWEEN 18 AND 21;\",\r\n        \"expected_output\": [[\"Alice\", 20], [\"Charlie\", 19], [\"Eve\", 18]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age BETWEEN 18 AND 21 AND grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age BETWEEN 18 AND 21;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age BETWEEN 18 AND 21 AND id > 2;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age BETWEEN 18 AND 21 AND id < 5;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age BETWEEN 18 AND 21 ORDER BY age ASC;\",\r\n        \"expected_output\": [[5, 'Eve', 18, 'B'], [3, 'Charlie', 19, 'C'], [1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age BETWEEN 18 AND 21 AND name LIKE 'A%';\",\r\n        \"expected_output\": [[\"Alice\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, grade FROM students WHERE age BETWEEN 18 AND 21;\",\r\n        \"expected_output\": [[\"Alice\", \"A\"], [\"Charlie\", \"C\"], [\"Eve\", \"B\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age BETWEEN 18 AND 21 AND grade IN ('A', 'B');\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [5, 'Eve', 18, 'B']]\r\n    }\r\n]"}, {"id": "107", "title": "Find Students by Grade and Sort by Age", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students and sort them by age in ascending order.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY age ASC;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'B'], [3, 'Charlie', 19, 'C'], [1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' ORDER BY age ASC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, age FROM students ORDER BY age ASC;\",\r\n        \"expected_output\": [[\"Bob\", 17], [\"Eve\", 18], [\"Charlie\", 19], [\"Alice\", 20], [\"David\", 22]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students ORDER BY age DESC;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A'], [1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [5, 'Eve', 18, 'B'], [2, 'Bob', 17, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age > 18 ORDER BY age ASC;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C'], [1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'B' ORDER BY age ASC;\",\r\n        \"expected_output\": [[2, 'Bob', 17, 'B'], [5, 'Eve', 18, 'B']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT id, name FROM students ORDER BY age ASC;\",\r\n        \"expected_output\": [[2, 'Bob'], [5, 'Eve'], [3, 'Charlie'], [1, 'Alice'], [4, 'David']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'C' ORDER BY age ASC;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age > 18 AND grade = 'A' ORDER BY age ASC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age BETWEEN 18 AND 21 ORDER BY age ASC;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C'], [1, 'Alice', 20, 'A']]\r\n    }\r\n]"}, {"id": "106", "title": "Find Students with Name Starting with 'A'", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students whose names start with the letter 'A'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE 'A%';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name LIKE 'A%';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE 'A%' AND grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE name LIKE 'A%';\",\r\n        \"expected_output\": [[\"Alice\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT id, name FROM students WHERE name LIKE 'A%';\",\r\n        \"expected_output\": [[1, \"Alice\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, age FROM students WHERE name LIKE 'A%';\",\r\n        \"expected_output\": [[\"Alice\", 20]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE 'A%' AND age > 18;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE 'A%' ORDER BY name ASC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE name LIKE 'A%' AND id = 1;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE name LIKE 'A%' AND age = 20;\",\r\n        \"expected_output\": [[\"Alice\"]]\r\n    }\r\n]"}, {"id": "105", "title": "Count Total Students", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to count the total number of students in the table.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students;\",\r\n        \"expected_output\": [[5]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 18;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name LIKE 'A%';\",\r\n        \"expected_output\": [[1]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade IN ('A', 'B');\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE id > 2;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age BETWEEN 18 AND 22;\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age < 20;\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name LIKE '%e';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'C';\",\r\n        \"expected_output\": [[1]]\r\n    }\r\n]"}, {"id": "104", "title": "Find Students Older Than 18", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students older than 18 years old.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age > 18;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 18;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE age > 18;\",\r\n        \"expected_output\": [[\"Alice\"], [\"Charlie\"], [\"David\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT age FROM students WHERE age > 18;\",\r\n        \"expected_output\": [[20], [19], [22]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age > 18 ORDER BY age ASC;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C'], [1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age > 18 AND grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, grade FROM students WHERE age > 18;\",\r\n        \"expected_output\": [[\"Alice\", \"A\"], [\"Charlie\", \"C\"], [\"David\", \"A\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age > 18 AND id > 2;\",\r\n        \"expected_output\": [[3, 'Charlie', 19, 'C'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age > 18 AND id < 4;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE age > 18 AND name LIKE '%e';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [3, 'Charlie', 19, 'C']]\r\n    }\r\n]"}, {"id": "103", "title": "Find Students with Grade A", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to select all students with grade 'A'.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND age > 20;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[\"Alice\"], [\"David\"]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, age FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[\"Alice\", 20], [\"David\", 22]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' ORDER BY name ASC;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT id FROM students WHERE grade = 'A';\",\r\n        \"expected_output\": [[1], [4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND id > 1;\",\r\n        \"expected_output\": [[4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND name LIKE 'A%';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND age BETWEEN 20 AND 22;\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A'], [4, 'David', 22, 'A']]\r\n    },\r\n    {\r\n        \"query\": \"SELECT * FROM students WHERE grade = 'A' AND name LIKE '%e';\",\r\n        \"expected_output\": [[1, 'Alice', 20, 'A']]\r\n    }\r\n]"}, {"id": "102", "title": "Count Students Who Are 19 or Older", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to count all students who are 19 years or older.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age >= 19;\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age >= 20;\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 22;\",\r\n        \"expected_output\": [[0]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age < 19;\",\r\n        \"expected_output\": [[2]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age BETWEEN 19 AND 22;\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age IN (20, 21, 22);\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age > 18;\",\r\n        \"expected_output\": [[4]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age >= 18 AND grade = 'A';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age >= 19 AND grade != 'C';\",\r\n        \"expected_output\": [[3]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE age >= 21;\",\r\n        \"expected_output\": [[2]]\r\n    }\r\n]"}, {"id": "101", "title": "Check for Duplicate Student Names", "description": "Given a pre-existing table named students with the following structure: id: INT, name: VARCHAR(100), age: INT, grade: VARCHAR(10). Write a query to check for duplicate names in the students table.", "language": "mysql", "test_cases": "[\r\n    {\r\n        \"query\": \"SELECT name, COUNT(*) FROM students GROUP BY name HAVING COUNT(*) > 1;\",\r\n        \"expected_output\": [[]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name IN (SELECT name FROM students GROUP BY name HAVING COUNT(*) > 1);\",\r\n        \"expected_output\": [[0]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students GROUP BY name HAVING COUNT(*) > 1;\",\r\n        \"expected_output\": [[]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students;\",\r\n        \"expected_output\": [[6]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(DISTINCT name) FROM students;\",\r\n        \"expected_output\": [[6]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, COUNT(*) FROM students WHERE grade = 'A' GROUP BY name HAVING COUNT(*) > 1;\",\r\n        \"expected_output\": [[]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name, COUNT(*) FROM students WHERE age > 20 GROUP BY name HAVING COUNT(*) > 1;\",\r\n        \"expected_output\": [[]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE id < 5 GROUP BY name HAVING COUNT(*) > 1;\",\r\n        \"expected_output\": [[]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT name FROM students WHERE id IN (1, 2) GROUP BY name HAVING COUNT(*) > 1;\",\r\n        \"expected_output\": [[]]\r\n    },\r\n    {\r\n        \"query\": \"SELECT COUNT(*) FROM students WHERE name LIKE 'A%';\",\r\n        \"expected_output\": [[1]]\r\n    }\r\n]"}, {"id": "100", "title": "Sum of Squares of Numbers", "description": "Write a function that calculates the sum of squares of the first n natural numbers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 3,\r\n        \"expected_output\": 14\r\n    },\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 55\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 385\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": 4,\r\n        \"expected_output\": 30\r\n    },\r\n    {\r\n        \"input\": 6,\r\n        \"expected_output\": 91\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 140\r\n    },\r\n    {\r\n        \"input\": 8,\r\n        \"expected_output\": 204\r\n    },\r\n    {\r\n        \"input\": 9,\r\n        \"expected_output\": 285\r\n    }\r\n]"}, {"id": "99", "title": "Find LCM Using Recursion", "description": "Write a function that finds the Least Common Multiple (LCM) of two numbers using recursion.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [12, 15],\r\n        \"expected_output\": 60\r\n    },\r\n    {\r\n        \"input\": [5, 7],\r\n        \"expected_output\": 35\r\n    },\r\n    {\r\n        \"input\": [8, 9],\r\n        \"expected_output\": 72\r\n    },\r\n    {\r\n        \"input\": [10, 25],\r\n        \"expected_output\": 50\r\n    },\r\n    {\r\n        \"input\": [3, 6],\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": [18, 24],\r\n        \"expected_output\": 72\r\n    },\r\n    {\r\n        \"input\": [6, 8],\r\n        \"expected_output\": 24\r\n    },\r\n    {\r\n        \"input\": [14, 35],\r\n        \"expected_output\": 70\r\n    },\r\n    {\r\n        \"input\": [1, 1],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [0, 5],\r\n        \"expected_output\": 0\r\n    }\r\n]"}, {"id": "98", "title": "Find Power of a Number Using Recursion", "description": "Write a function that calculates the power of a number using recursion.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [2, 3],\r\n        \"expected_output\": 8\r\n    },\r\n    {\r\n        \"input\": [5, 0],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [10, 2],\r\n        \"expected_output\": 100\r\n    },\r\n    {\r\n        \"input\": [3, 3],\r\n        \"expected_output\": 27\r\n    },\r\n    {\r\n        \"input\": [4, 5],\r\n        \"expected_output\": 1024\r\n    },\r\n    {\r\n        \"input\": [2, 10],\r\n        \"expected_output\": 1024\r\n    },\r\n    {\r\n        \"input\": [7, 1],\r\n        \"expected_output\": 7\r\n    },\r\n    {\r\n        \"input\": [0, 5],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [1, 100],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [2, -3],\r\n        \"expected_output\": 0.125\r\n    }\r\n]"}, {"id": "97", "title": "Check if String is Palindrome", "description": "Write a function that checks if a string is a palindrome.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": \"madam\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"racecar\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"A man, a plan, a canal, Panama\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"not a palindrome\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"12321\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"Was it a car or a cat I saw?\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"No 'x' in Nixon\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"abcd\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"!@#$%^&*()_+\r\n        \",\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "96", "title": "Check for Anagram", "description": "Write a function that checks whether two strings are anagrams.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [\"listen\", \"silent\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"hello\", \"world\"],\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": [\"evil\", \"vile\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"triangle\", \"integral\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"apple\", \"pale\"],\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": [\"aabbcc\", \"abcabc\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"night\", \"thing\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"test\", \"sett\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"abcd\", \"dcba\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"abc\", \"def\"],\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "95", "title": "Convert Decimal to Hexadecimal", "description": "Write a function that converts a decimal number to its hexadecimal equivalent.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 255,\r\n        \"expected_output\": \"FF\"\r\n    },\r\n    {\r\n        \"input\": 16,\r\n        \"expected_output\": \"10\"\r\n    },\r\n    {\r\n        \"input\": 1234,\r\n        \"expected_output\": \"4D2\"\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": \"F\"\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": \"0\"\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": \"1\"\r\n    },\r\n    {\r\n        \"input\": 42,\r\n        \"expected_output\": \"2A\"\r\n    },\r\n    {\r\n        \"input\": 256,\r\n        \"expected_output\": \"100\"\r\n    },\r\n    {\r\n        \"input\": 4095,\r\n        \"expected_output\": \"FFF\"\r\n    },\r\n    {\r\n        \"input\": 2048,\r\n        \"expected_output\": \"800\"\r\n    }\r\n]"}, {"id": "94", "title": "Calculate Factorial Recursively", "description": "Write a function that calculates the factorial of a number using recursion.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 120\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 5040\r\n    },\r\n    {\r\n        \"input\": 3,\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 4,\r\n        \"expected_output\": 24\r\n    },\r\n    {\r\n        \"input\": 6,\r\n        \"expected_output\": 720\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 3628800\r\n    },\r\n    {\r\n        \"input\": 9,\r\n        \"expected_output\": 362880\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": 2\r\n    }\r\n]"}, {"id": "93", "title": "Find Sum of Odd Numbers", "description": "Write a function that finds the sum of all odd numbers up to a given number n.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 25\r\n    },\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": 100\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": 30,\r\n        \"expected_output\": 225\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": 64\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 16\r\n    },\r\n    {\r\n        \"input\": 50,\r\n        \"expected_output\": 625\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": 2500\r\n    }\r\n]"}, {"id": "92", "title": "Find Median of List", "description": "Write a function that returns the median of a list of numbers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 3, 4, 2, 5],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [7, 8, 9, 10],\r\n        \"expected_output\": 8.5\r\n    },\r\n    {\r\n        \"input\": [5, 1, 3],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5, 6],\r\n        \"expected_output\": 3.5\r\n    },\r\n    {\r\n        \"input\": [10, 15, 20, 25, 30, 35, 40],\r\n        \"expected_output\": 25\r\n    },\r\n    {\r\n        \"input\": [100, 200, 300],\r\n        \"expected_output\": 200\r\n    },\r\n    {\r\n        \"input\": [2, 4],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [10, 10, 20, 20],\r\n        \"expected_output\": 15\r\n    },\r\n    {\r\n        \"input\": [1],\r\n        \"expected_output\": 1\r\n    }\r\n]"}, {"id": "91", "title": "Generate List of Even Numbers", "description": "Write a function that generates a list of all even numbers up to a given number n.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": [2, 4, 6, 8, 10]\r\n    },\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": [2, 4]\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": [2, 4, 6, 8, 10, 12, 14]\r\n    },\r\n    {\r\n        \"input\": 30,\r\n        \"expected_output\": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]\r\n    },\r\n    {\r\n        \"input\": 50,\r\n        \"expected_output\": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50]\r\n    },\r\n    {\r\n        \"input\": 11,\r\n        \"expected_output\": [2, 4, 6, 8, 10]\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]\r\n    }\r\n]"}, {"id": "90", "title": "Find Minimum in List", "description": "Write a function that returns the smallest element in a list of integers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [-10, 0, 5],\r\n        \"expected_output\": -10\r\n    },\r\n    {\r\n        \"input\": [50, 40, 30, 20],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [7, 8, 5, 2],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [1],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [0, 0, 0],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [-1, -1, -1],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [2, 2, 2],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [-5, -3, -2],\r\n        \"expected_output\": -5\r\n    },\r\n    {\r\n        \"input\": [5, 10, 15],\r\n        \"expected_output\": 5\r\n    }\r\n]"}, {"id": "89", "title": "Find Average of List", "description": "Write a function that returns the average of a list of numbers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [10, 20, 30],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [5, 15, 25, 35],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [7, 14, 21],\r\n        \"expected_output\": 14\r\n    },\r\n    {\r\n        \"input\": [1, 2, 3, 4],\r\n        \"expected_output\": 2.5\r\n    },\r\n    {\r\n        \"input\": [10],\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": [0, 0, 0],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [-1, -2, -3],\r\n        \"expected_output\": -2\r\n    },\r\n    {\r\n        \"input\": [100, 200, 300],\r\n        \"expected_output\": 200\r\n    },\r\n    {\r\n        \"input\": [2, 2, 2, 2],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [3, 4, 5],\r\n        \"expected_output\": 4\r\n    }\r\n]"}, {"id": "88", "title": "Remove Duplicates from List", "description": "Write a function that removes duplicate elements from a list.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 2, 2, 3, 4, 4, 5],\r\n        \"expected_output\": [1, 2, 3, 4, 5]\r\n    },\r\n    {\r\n        \"input\": [10, 10, 10],\r\n        \"expected_output\": [10]\r\n    },\r\n    {\r\n        \"input\": [1, 2, 3, 4],\r\n        \"expected_output\": [1, 2, 3, 4]\r\n    },\r\n    {\r\n        \"input\": [5, 5, 5, 5, 5],\r\n        \"expected_output\": [5]\r\n    },\r\n    {\r\n        \"input\": [],\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"input\": [1, 1, 2, 2, 3, 4, 4, 5],\r\n        \"expected_output\": [1, 2, 3, 4, 5]\r\n    },\r\n    {\r\n        \"input\": [2, 3, 4, 3, 2],\r\n        \"expected_output\": [2, 3, 4]\r\n    },\r\n    {\r\n        \"input\": [1, 2, 2, 2, 3, 4],\r\n        \"expected_output\": [1, 2, 3, 4]\r\n    },\r\n    {\r\n        \"input\": [9, 9, 1, 1, 1],\r\n        \"expected_output\": [9, 1]\r\n    },\r\n    {\r\n        \"input\": [0, 0, 1, 1, 0],\r\n        \"expected_output\": [0, 1]\r\n    }\r\n]"}, {"id": "87", "title": "Check if List is Sorted", "description": "Write a function that checks if a given list is sorted in ascending order.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [5, 4, 3, 2, 1],\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": [1, 3, 2, 4, 5],\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": [2, 2, 2],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [1],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [1, 1, 2, 2],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30, 25],\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": [2, 4, 6, 8],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5, 4],\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "86", "title": "Find the Largest Number", "description": "Write a program that takes an array of integers and returns the largest number.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [3, 5, 7, 2, 8],\r\n        \"expected_output\": 8\r\n    },\r\n    {\r\n        \"input\": [1, 1, 1, 1],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [-10, -5, -20],\r\n        \"expected_output\": -5\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30],\r\n        \"expected_output\": 30\r\n    },\r\n    {\r\n        \"input\": [0, -1, -2],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [100, 200, 150],\r\n        \"expected_output\": 200\r\n    },\r\n    {\r\n        \"input\": [5, 6, 7],\r\n        \"expected_output\": 7\r\n    },\r\n    {\r\n        \"input\": [1000],\r\n        \"expected_output\": 1000\r\n    },\r\n    {\r\n        \"input\": [-1, -1, -1],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [-3, -1, -4],\r\n        \"expected_output\": -1\r\n    }\r\n]"}, {"id": "85", "title": "Find Square Root of a Number", "description": "Write a program to find the square root of a given number without using built-in functions.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 16,\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": 81,\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": 9,\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": 4,\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": 49,\r\n        \"expected_output\": 7\r\n    },\r\n    {\r\n        \"input\": 144,\r\n        \"expected_output\": 12\r\n    }\r\n]"}, {"id": "84", "title": "Find Nth Fibonacci Number", "description": "Write a function that returns the Nth Fibonacci number.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 13\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 55\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 3,\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": 610\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": 6765\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": 75025\r\n    },\r\n    {\r\n        \"input\": 30,\r\n        \"expected_output\": 832040\r\n    }\r\n]"}, {"id": "83", "title": "Find Prime Factors", "description": "Write a function that returns all prime factors of a given number.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 28,\r\n        \"expected_output\": [2, 2, 7]\r\n    },\r\n    {\r\n        \"input\": 30,\r\n        \"expected_output\": [2, 3, 5]\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": [2, 2, 5, 5]\r\n    },\r\n    {\r\n        \"input\": 60,\r\n        \"expected_output\": [2, 2, 3, 5]\r\n    },\r\n    {\r\n        \"input\": 44,\r\n        \"expected_output\": [2, 2, 11]\r\n    },\r\n    {\r\n        \"input\": 121,\r\n        \"expected_output\": [11, 11]\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"input\": 97,\r\n        \"expected_output\": [97]\r\n    },\r\n    {\r\n        \"input\": 70,\r\n        \"expected_output\": [2, 5, 7]\r\n    },\r\n    {\r\n        \"input\": 84,\r\n        \"expected_output\": [2, 2, 3, 7]\r\n    }\r\n]"}, {"id": "82", "title": "Check if Year is Leap Year", "description": "Write a program to check whether a given year is a leap year.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 2020,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1900,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 2000,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 2016,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 2024,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 2100,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 1996,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1800,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 1600,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1582,\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "81", "title": "Check if Number is Palindrome", "description": "Write a function that checks if a given number is a palindrome.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 121,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 123,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 989,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 12321,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1001,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1234321,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 567,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 4554,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 909,\r\n        \"expected_output\": true\r\n    }\r\n]"}, {"id": "80", "title": "Find Length of String", "description": "Write a function that returns the length of a given string.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": \"OpenAI\",\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": \"\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"Python programming\",\r\n        \"expected_output\": 18\r\n    },\r\n    {\r\n        \"input\": \"a\",\r\n        \"expected_output\": 1\r\n    }\r\n]"}, {"id": "79", "title": "Find Nth Prime Number", "description": "Write a function that returns the Nth prime number.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 11\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 29\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": 47\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": 97\r\n    }\r\n]"}, {"id": "78", "title": "Check Perfect Square", "description": "Write a program that checks if a given number is a perfect square.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 16,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 36,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "77", "title": "Find LCM of Two Numbers", "description": "Write a function that finds the Least Common Multiple (LCM) of two numbers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [4, 5],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [7, 3],\r\n        \"expected_output\": 21\r\n    },\r\n    {\r\n        \"input\": [12, 15],\r\n        \"expected_output\": 60\r\n    },\r\n    {\r\n        \"input\": [6, 8],\r\n        \"expected_output\": 24\r\n    },\r\n    {\r\n        \"input\": [5, 5],\r\n        \"expected_output\": 5\r\n    }\r\n]"}, {"id": "76", "title": "Find Factors of a Number", "description": "Write a program that finds all factors of a given number.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 12,\r\n        \"expected_output\": [1, 2, 3, 4, 6, 12]\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": [1, 3, 5, 15]\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": [1, 7]\r\n    },\r\n    {\r\n        \"input\": 16,\r\n        \"expected_output\": [1, 2, 4, 8, 16]\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": [1]\r\n    }\r\n]"}, {"id": "75", "title": "Check for Vowel", "description": "Write a function that checks if a given character is a vowel (a, e, i, o, u).", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": \"a\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"b\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"o\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"e\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"x\",\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "74", "title": "Calculate Power of a Number", "description": "Write a function that takes a base and an exponent and returns the power (base^exponent).", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [2, 3],\r\n        \"expected_output\": 8\r\n    },\r\n    {\r\n        \"input\": [5, 0],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [7, 2],\r\n        \"expected_output\": 49\r\n    },\r\n    {\r\n        \"input\": [10, 1],\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": [2, -2],\r\n        \"expected_output\": 0.25\r\n    }\r\n]"}, {"id": "73", "title": "Find the Sum of an Array", "description": "Write a function that takes an array of integers and returns their sum.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5],\r\n        \"expected_output\": 15\r\n    },\r\n    {\r\n        \"input\": [-1, -2, -3],\r\n        \"expected_output\": -6\r\n    },\r\n    {\r\n        \"input\": [0, 0, 0],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [5, 5, 5],\r\n        \"expected_output\": 15\r\n    },\r\n    {\r\n        \"input\": [10, -10],\r\n        \"expected_output\": 0\r\n    }\r\n]"}, {"id": "72", "title": "Convert Celsius to Fahrenheit", "description": "Write a program that converts Celsius to Fahrenheit using the formula: F = (C * 9/5) + 32.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 32\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": 212\r\n    },\r\n    {\r\n        \"input\": -40,\r\n        \"expected_output\": -40\r\n    },\r\n    {\r\n        \"input\": 37,\r\n        \"expected_output\": 98.6\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": 68\r\n    }\r\n]"}, {"id": "71", "title": "Sum of Natural Numbers", "description": "Write a program that returns the sum of the first n natural numbers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 55\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": 5050\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 28\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 0\r\n    }\r\n]"}, {"id": "70", "title": "Find Factorial of a Number", "description": "Write a function that returns the factorial of a given number.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 120\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 5040\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 3628800\r\n    }\r\n]"}, {"id": "69", "title": "Check Palindrome Number", "description": "Write a program to check if a given number is a palindrome.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 121,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 123,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 989,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1001,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "68", "title": "Reverse an Array", "description": "Write a function that reverses an array of integers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5],\r\n        \"expected_output\": [5, 4, 3, 2, 1]\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30, 40],\r\n        \"expected_output\": [40, 30, 20, 10]\r\n    },\r\n    {\r\n        \"input\": [0, 0, 0],\r\n        \"expected_output\": [0, 0, 0]\r\n    },\r\n    {\r\n        \"input\": [1],\r\n        \"expected_output\": [1]\r\n    },\r\n    {\r\n        \"input\": [],\r\n        \"expected_output\": []\r\n    }\r\n]"}, {"id": "67", "title": "Check Perfect Number", "description": "Write a function to check if a number is a perfect number (equal to the sum of its divisors, excluding itself).", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 6,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 28,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 12,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 496,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 8128,\r\n        \"expected_output\": true\r\n    }\r\n]"}, {"id": "66", "title": "Check Armstrong Number", "description": "Write a function that checks whether a number is an Armstrong number or not.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 153,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 370,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 123,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 9474,\r\n        \"expected_output\": true\r\n    }\r\n]"}, {"id": "65", "title": "Find the Sum of Digits", "description": "Write a function that finds the sum of digits of a given number.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 123,\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": 4567,\r\n        \"expected_output\": 22\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": 999,\r\n        \"expected_output\": 27\r\n    },\r\n    {\r\n        \"input\": -123,\r\n        \"expected_output\": 6\r\n    }\r\n]"}, {"id": "64", "title": "Find the HCF of Two Numbers", "description": "Write a program to find the Highest Common Factor (HCF) of two numbers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [8, 12],\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": [100, 80],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [17, 19],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [48, 18],\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": [100, 25],\r\n        \"expected_output\": 25\r\n    }\r\n]"}, {"id": "63", "title": "Convert Binary to Decimal", "description": "Write a function that converts a binary number (given as a string) to its decimal equivalent.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": \"1010\",\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": \"1111\",\r\n        \"expected_output\": 15\r\n    },\r\n    {\r\n        \"input\": \"1001\",\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": \"0\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"1\",\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": \"1100100\",\r\n        \"expected_output\": 100\r\n    }\r\n]"}, {"id": "62", "title": "Find Missing Number in List", "description": "Write a function that finds the missing number in a list of numbers from 1 to n.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 2, 3, 5],\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": [6, 2, 3, 4, 1],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [1, 2, 4, 5],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [1, 3, 4, 5],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [1, 5],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [2, 3, 4],\r\n        \"expected_output\": 1\r\n    }\r\n]"}, {"id": "61", "title": "Find the Nth Fibonacci Number", "description": "Write a function that returns the Nth number in the Fibonacci sequence.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 55\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": 610\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 3,\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": 6765\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": 75025\r\n    }\r\n]"}, {"id": "60", "title": "Find Second Largest Number in List", "description": "Write a program that finds the second largest number in a list of integers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5],\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30, 40],\r\n        \"expected_output\": 30\r\n    },\r\n    {\r\n        \"input\": [5, 5, 5, 5],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [9, 1, 8, 7, 2],\r\n        \"expected_output\": 8\r\n    },\r\n    {\r\n        \"input\": [100, 200, 50, 75],\r\n        \"expected_output\": 100\r\n    },\r\n    {\r\n        \"input\": [2, 2, 2, 2, 1],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [10, 9, 10, 8],\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": [6, 6, 6, 7],\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": [3, 1, 4, 4, 2],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [5],\r\n        \"expected_output\": null\r\n    }\r\n]"}, {"id": "59", "title": "Find GCD of Two Numbers", "description": "Write a program that calculates the Greatest Common Divisor (GCD) of two numbers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [48, 18],\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": [101, 103],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [54, 24],\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": [24, 36],\r\n        \"expected_output\": 12\r\n    },\r\n    {\r\n        \"input\": [5, 10],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [12, 8],\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": [7, 21],\r\n        \"expected_output\": 7\r\n    },\r\n    {\r\n        \"input\": [15, 25],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [100, 75],\r\n        \"expected_output\": 25\r\n    },\r\n    {\r\n        \"input\": [13, 39],\r\n        \"expected_output\": 13\r\n    }\r\n]"}, {"id": "58", "title": "Check for Prime Number", "description": "Write a function that checks if a number is prime.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 11,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 16,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 17,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 19,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 29,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 37,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 49,\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "57", "title": "Calculate Simple Interest", "description": "Write a function that calculates simple interest given the principal, rate of interest, and time in years.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1000, 5, 2],\r\n        \"expected_output\": 100\r\n    },\r\n    {\r\n        \"input\": [1500, 4, 3],\r\n        \"expected_output\": 180\r\n    },\r\n    {\r\n        \"input\": [2000, 3, 1],\r\n        \"expected_output\": 60\r\n    },\r\n    {\r\n        \"input\": [2500, 6, 2],\r\n        \"expected_output\": 300\r\n    },\r\n    {\r\n        \"input\": [5000, 2, 5],\r\n        \"expected_output\": 500\r\n    },\r\n    {\r\n        \"input\": [10000, 1, 10],\r\n        \"expected_output\": 1000\r\n    },\r\n    {\r\n        \"input\": [15000, 4.5, 3],\r\n        \"expected_output\": 675\r\n    },\r\n    {\r\n        \"input\": [8000, 3, 2],\r\n        \"expected_output\": 480\r\n    },\r\n    {\r\n        \"input\": [12000, 5, 6],\r\n        \"expected_output\": 3600\r\n    },\r\n    {\r\n        \"input\": [3000, 7, 1],\r\n        \"expected_output\": 210\r\n    }\r\n]"}, {"id": "56", "title": "Check for Leap Year", "description": "Write a program that checks if a given year is a leap year.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 2000,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1900,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 2024,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1600,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 2023,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 2100,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 2400,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1752,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 2004,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 2001,\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "55", "title": "Check for Palindrome String", "description": "Write a function that checks if a string is a palindrome.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": \"radar\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"level\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"noon\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"world\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"\", \r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"A man a plan a canal Panama\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"Was it a car or a cat I saw\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"Step on no pets\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"12321\",\r\n        \"expected_output\": true\r\n    }\r\n]"}, {"id": "54", "title": "Calculate Sum of List", "description": "Write a program that calculates the sum of all elements in a list.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5],\r\n        \"expected_output\": 15\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30],\r\n        \"expected_output\": 60\r\n    },\r\n    {\r\n        \"input\": [-5, 0, 5],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [100, 200, 300],\r\n        \"expected_output\": 600\r\n    },\r\n    {\r\n        \"input\": [1, 1, 1, 1],\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": [],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [7, 8, 9],\r\n        \"expected_output\": 24\r\n    },\r\n    {\r\n        \"input\": [-10, 10],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [1.5, 2.5, 3.5],\r\n        \"expected_output\": 7.5\r\n    },\r\n    {\r\n        \"input\": [1, -1, 2, -2],\r\n        \"expected_output\": 0\r\n    }\r\n]"}, {"id": "53", "title": "Find the Longest Word", "description": "Write a function that finds the longest word in a given sentence.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": \"I love programming\",\r\n        \"expected_output\": \"programming\"\r\n    },\r\n    {\r\n        \"input\": \"OpenAI creates AI models\",\r\n        \"expected_output\": \"creates\"\r\n    },\r\n    {\r\n        \"input\": \"This is fun\",\r\n        \"expected_output\": \"This\"\r\n    },\r\n    {\r\n        \"input\": \"A journey of a thousand miles\",\r\n        \"expected_output\": \"thousand\"\r\n    },\r\n    {\r\n        \"input\": \"To be or not to be\",\r\n        \"expected_output\": \"not\"\r\n    },\r\n    {\r\n        \"input\": \"Find the longest word\",\r\n        \"expected_output\": \"longest\"\r\n    },\r\n    {\r\n        \"input\": \"I am learning Python programming\",\r\n        \"expected_output\": \"programming\"\r\n    },\r\n    {\r\n        \"input\": \"Short long longest\",\r\n        \"expected_output\": \"longest\"\r\n    },\r\n    {\r\n        \"input\": \"abc def ghi\",\r\n        \"expected_output\": \"abc\"\r\n    },\r\n    {\r\n        \"input\": \"\",\r\n        \"expected_output\": \"\"\r\n    }\r\n]"}, {"id": "52", "title": "Generate Fibonacci Sequence up to N", "description": "Write a function that generates all Fibonacci numbers up to a given number N.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": [0, 1, 1, 2, 3, 5, 8]\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": [0, 1, 1, 2, 3, 5, 8, 13]\r\n    },\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": [0, 1, 1, 2, 3]\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": [0, 1, 1, 2, 3, 5, 8, 13]\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": [0]\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": [0, 1]\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": [0, 1, 1, 2, 3, 5, 8, 13, 21]\r\n    },\r\n    {\r\n        \"input\": 30,\r\n        \"expected_output\": [0, 1, 1, 2, 3, 5, 8, 13, 21]\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\r\n    },\r\n    {\r\n        \"input\": 50,\r\n        \"expected_output\": [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\r\n    }\r\n]"}, {"id": "51", "title": "Check for Substring", "description": "Write a function that checks if one string is a substring of another.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [\"hello\", \"ell\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"world\", \"abc\"],\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": [\"OpenAI\", \"AI\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"substring\", \"string\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"check\", \"ck\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"abcdef\", \"abc\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"abcdef\", \"def\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"abcdef\", \"gh\"],\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": [\"a\", \"a\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"\", \"any\"],\r\n        \"expected_output\": false\r\n    }\r\n]"}, {"id": "50", "title": "Matrix Multiplication", "description": "Write a function that multiplies two 2x2 matrices and returns the result.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [[[1, 2], [3, 4]], [[5, 6], [7, 8]]],\r\n        \"expected_output\": [[19, 22], [43, 50]]\r\n    },\r\n    {\r\n        \"input\": [[[0, 0], [0, 0]], [[1, 1], [1, 1]]],\r\n        \"expected_output\": [[0, 0], [0, 0]]\r\n    },\r\n    {\r\n        \"input\": [[[2, 3], [4, 5]], [[6, 7], [8, 9]]],\r\n        \"expected_output\": [[36, 41], [64, 73]]\r\n    },\r\n    {\r\n        \"input\": [[[1, 1], [1, 1]], [[1, 1], [1, 1]]],\r\n        \"expected_output\": [[2, 2], [2, 2]]\r\n    },\r\n    {\r\n        \"input\": [[[2, 0], [0, 2]], [[3, 1], [1, 3]]],\r\n        \"expected_output\": [[6, 2], [6, 2]]\r\n    },\r\n    {\r\n        \"input\": [[[1, 2], [3, 4]], [[0, 1], [1, 0]]],\r\n        \"expected_output\": [[2, 1], [4, 3]]\r\n    },\r\n    {\r\n        \"input\": [[[1, 2], [3, 4]], [[2, 0], [1, 2]]],\r\n        \"expected_output\": [[4, 5], [10, 8]]\r\n    },\r\n    {\r\n        \"input\": [[[0, 1], [1, 0]], [[1, 0], [0, 1]]],\r\n        \"expected_output\": [[1, 0], [0, 1]]\r\n    },\r\n    {\r\n        \"input\": [[[2, 3], [4, 5]], [[1, 1], [1, 1]]],\r\n        \"expected_output\": [[5, 5], [9, 9]]\r\n    },\r\n    {\r\n        \"input\": [[[1, 1], [1, 1]], [[2, 3], [4, 5]]],\r\n        \"expected_output\": [[6, 8], [6, 8]]\r\n    }\r\n]"}, {"id": "49", "title": "Find the Mode", "description": "Write a program that finds the mode (the number that appears most frequently) of a list of numbers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 2, 2, 3, 4],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [5, 5, 6, 6, 6, 7],\r\n        \"expected_output\": 6\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30, 10, 20, 20],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [1, 1, 1, 2, 2, 2],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [3, 3, 3, 3, 2, 2],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [0, 0, 1, 1, 1],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [7, 8, 9, 9, 10, 10],\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": [1, 2, 2, 3, 3],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30, 30, 30],\r\n        \"expected_output\": 30\r\n    },\r\n    {\r\n        \"input\": [1, 2, 3, 4],\r\n        \"expected_output\": null\r\n    }\r\n]"}, {"id": "48", "title": "Find the Median", "description": "Write a program that finds the median of a list of numbers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 3, 4, 2, 5],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [7, 8, 9, 10],\r\n        \"expected_output\": 8.5\r\n    },\r\n    {\r\n        \"input\": [1, 2, 3],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [1, 2, 3, 4],\r\n        \"expected_output\": 2.5\r\n    },\r\n    {\r\n        \"input\": [5, 3, 8, 1, 9],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [2, 2, 3, 5, 7],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [10, 0, 5, 15],\r\n        \"expected_output\": 7.5\r\n    },\r\n    {\r\n        \"input\": [100, 200, 300],\r\n        \"expected_output\": 200\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30, 40, 50, 60],\r\n        \"expected_output\": 35\r\n    }\r\n]"}, {"id": "47", "title": "Binary Search", "description": "Write a function that implements binary search to find a target number in a sorted list.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [[1, 2, 3, 4, 5], 3],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [[10, 20, 30, 40, 50], 40],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [[5, 6, 7, 8, 9], 10],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [[1, 2, 3, 4, 5], 1],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [[1, 2, 3, 4, 5], 5],\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": [[3, 3, 3, 3], 3],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [[1, 3, 5, 7, 9], 9],\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": [[1, 3, 5, 7, 9], 2],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [[2, 4, 6, 8, 10], 4],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [[1, 2], 3],\r\n        \"expected_output\": -1\r\n    }\r\n]"}, {"id": "46", "title": "Calculate LCM of Two Numbers", "description": "Write a function that calculates the Least Common Multiple (LCM) of two numbers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [12, 15],\r\n        \"expected_output\": 60\r\n    },\r\n    {\r\n        \"input\": [5, 7],\r\n        \"expected_output\": 35\r\n    },\r\n    {\r\n        \"input\": [10, 20],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [8, 9],\r\n        \"expected_output\": 72\r\n    },\r\n    {\r\n        \"input\": [3, 11],\r\n        \"expected_output\": 33\r\n    },\r\n    {\r\n        \"input\": [21, 6],\r\n        \"expected_output\": 42\r\n    },\r\n    {\r\n        \"input\": [14, 15],\r\n        \"expected_output\": 210\r\n    },\r\n    {\r\n        \"input\": [1, 10],\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": [24, 36],\r\n        \"expected_output\": 72\r\n    },\r\n    {\r\n        \"input\": [15, 25],\r\n        \"expected_output\": 75\r\n    }\r\n]"}, {"id": "45", "title": "Sum of Prime Numbers", "description": "Write a program that calculates the sum of all prime numbers up to a given number N.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 17\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": 77\r\n    },\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": 30,\r\n        \"expected_output\": 129\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": 41\r\n    },\r\n    {\r\n        \"input\": 50,\r\n        \"expected_output\": 328\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": 1060\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": 77\r\n    }\r\n]"}, {"id": "44", "title": "Generate Prime Numbers up to N", "description": "Write a program that generates all prime numbers up to a given number N.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": [2, 3, 5, 7]\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": [2, 3, 5, 7, 11, 13, 17, 19]\r\n    },\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": [2, 3, 5]\r\n    },\r\n    {\r\n        \"input\": 30,\r\n        \"expected_output\": [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\r\n    },\r\n    {\r\n        \"input\": 50,\r\n        \"expected_output\": [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": [2]\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": [2, 3, 5, 7, 11, 13]\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": [2, 3, 5, 7, 11, 13, 17, 19, 23]\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\r\n    }\r\n]"}, {"id": "43", "title": "Calculate Compound Interest", "description": "Write a program that calculates compound interest. Formula: A = P(1 + r/n)^(nt), where P is the principal, r is the annual interest rate, n is the number of times the interest is compounded per year, and t is the time in years.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1000, 0.05, 4, 5],\r\n        \"expected_output\": 1283.68\r\n    },\r\n    {\r\n        \"input\": [1500, 0.03, 12, 3],\r\n        \"expected_output\": 1757.85\r\n    },\r\n    {\r\n        \"input\": [2000, 0.04, 2, 6],\r\n        \"expected_output\": 2548.55\r\n    },\r\n    {\r\n        \"input\": [500, 0.06, 2, 10],\r\n        \"expected_output\": 897.49\r\n    },\r\n    {\r\n        \"input\": [10000, 0.07, 1, 5],\r\n        \"expected_output\": 14071.54\r\n    },\r\n    {\r\n        \"input\": [2500, 0.02, 4, 10],\r\n        \"expected_output\": 3051.00\r\n    },\r\n    {\r\n        \"input\": [3000, 0.05, 1, 3],\r\n        \"expected_output\": 3483.31\r\n    },\r\n    {\r\n        \"input\": [1200, 0.08, 12, 1],\r\n        \"expected_output\": 1298.57\r\n    },\r\n    {\r\n        \"input\": [800, 0.03, 4, 2],\r\n        \"expected_output\": 844.43\r\n    },\r\n    {\r\n        \"input\": [4500, 0.09, 2, 5],\r\n        \"expected_output\": 6942.10\r\n    }\r\n]"}, {"id": "42", "title": "Check Divisibility by 7", "description": "Write a function that checks if a number is divisible by 7.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 49,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 50,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 21,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 14,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 13,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 70,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 71,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 28,\r\n        \"expected_output\": true\r\n    }\r\n]"}, {"id": "41", "title": "Check Anagram", "description": "Write a function that checks if two strings are anagrams (contain the same characters in a different order).", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [\"listen\", \"silent\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"hello\", \"world\"],\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": [\"evil\", \"vile\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"triangle\", \"integral\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"apple\", \"pale\"],\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": [\"night\", \"thing\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"abc\", \"cba\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"abc\", \"def\"],\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": [\"aabbcc\", \"abcabc\"],\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": [\"a\", \"a\"],\r\n        \"expected_output\": true\r\n    }\r\n]"}, {"id": "40", "title": "Check for Palindrome Number", "description": "Write a program that checks if a number is a palindrome.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 121,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 123,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 989,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 45654,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1001,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 22,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": -121,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 12321,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 99999,\r\n        \"expected_output\": true\r\n    }\r\n]"}, {"id": "39", "title": "Find Largest Element in List", "description": "Write a program that takes a list of numbers and returns the largest element.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [2, 7, 1, 5],\r\n        \"expected_output\": 7\r\n    },\r\n    {\r\n        \"input\": [-10, -5, -1],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [100, 90, 80, 70],\r\n        \"expected_output\": 100\r\n    },\r\n    {\r\n        \"input\": [1],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [0, 0, 0],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [],\r\n        \"expected_output\": null\r\n    },\r\n    {\r\n        \"input\": [9, 8, 10, 6],\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": [-5, -3, -1],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [5, 3, 2],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [10, 20, 30, 40],\r\n        \"expected_output\": 40\r\n    }\r\n]"}, {"id": "38", "title": "Swap Two Numbers", "description": "Write a program that swaps the values of two numbers without using a third variable.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"3 5\",\r\n        \"expected_output\": \"5 3\"\r\n    },\r\n    {\r\n        \"input\": \"-2 10\",\r\n        \"expected_output\": \"10 -2\"\r\n    },\r\n    {\r\n        \"input\": \"0 1\",\r\n        \"expected_output\": \"1 0\"\r\n    },\r\n    {\r\n        \"input\": \"100 200\",\r\n        \"expected_output\": \"200 100\"\r\n    },\r\n    {\r\n        \"input\": \"-1 -1\",\r\n        \"expected_output\": \"-1 -1\"\r\n    },\r\n    {\r\n        \"input\": \"7 3\",\r\n        \"expected_output\": \"3 7\"\r\n    },\r\n    {\r\n        \"input\": \"5 8\",\r\n        \"expected_output\": \"8 5\"\r\n    },\r\n    {\r\n        \"input\": \"1 2\",\r\n        \"expected_output\": \"2 1\"\r\n    },\r\n    {\r\n        \"input\": \"9 4\",\r\n        \"expected_output\": \"4 9\"\r\n    },\r\n    {\r\n        \"input\": \"6 6\",\r\n        \"expected_output\": \"6 6\"\r\n    }\r\n]"}, {"id": "37", "title": "Find Area of Circle", "description": "Write a function that takes the radius of a circle as input and returns its area. The formula for the area of a circle is A = πr².", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 78.54\r\n    },\r\n    {\r\n        \"input\": 3,\r\n        \"expected_output\": 28.27\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 153.94\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 3.14\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 314.16\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": 12.57\r\n    },\r\n    {\r\n        \"input\": 4,\r\n        \"expected_output\": 50.27\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": 31415.93\r\n    },\r\n    {\r\n        \"input\": 12,\r\n        \"expected_output\": 452.39\r\n    }\r\n]"}, {"id": "36", "title": "Check Alphabet or Not", "description": "Write a program that checks whether a given character is an alphabet (a-z or A-Z).", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"a\",\r\n        \"expected_output\": \"Alphabet\"\r\n    },\r\n    {\r\n        \"input\": \"1\",\r\n        \"expected_output\": \"Not Alphabet\"\r\n    },\r\n    {\r\n        \"input\": \"Z\",\r\n        \"expected_output\": \"Alphabet\"\r\n    },\r\n    {\r\n        \"input\": \"B\",\r\n        \"expected_output\": \"Alphabet\"\r\n    },\r\n    {\r\n        \"input\": \"!\",\r\n        \"expected_output\": \"Not Alphabet\"\r\n    },\r\n    {\r\n        \"input\": \"g\",\r\n        \"expected_output\": \"Alphabet\"\r\n    },\r\n    {\r\n        \"input\": \"0\",\r\n        \"expected_output\": \"Not Alphabet\"\r\n    },\r\n    {\r\n        \"input\": \"C\",\r\n        \"expected_output\": \"Alphabet\"\r\n    },\r\n    {\r\n        \"input\": \"c\",\r\n        \"expected_output\": \"Alphabet\"\r\n    },\r\n    {\r\n        \"input\": \"@\",\r\n        \"expected_output\": \"Not Alphabet\"\r\n    }\r\n]"}, {"id": "35", "title": "Sum of Odd Numbers", "description": "Write a function that takes an integer n and returns the sum of the first n odd numbers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 25\r\n    },\r\n    {\r\n        \"input\": 3,\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 100\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": 4\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 49\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": 400\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": 225\r\n    },\r\n    {\r\n        \"input\": 4,\r\n        \"expected_output\": 16\r\n    }\r\n]"}, {"id": "34", "title": "Find Common Elements", "description": "Write a function that takes two lists and returns a list of elements that are common to both.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [[1, 2, 3], [2, 3, 4]],\r\n        \"expected_output\": [2, 3]\r\n    },\r\n    {\r\n        \"input\": [[5, 6, 7], [7, 8, 9]],\r\n        \"expected_output\": [7]\r\n    },\r\n    {\r\n        \"input\": [[1, 1, 1], [2, 2, 2]],\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"input\": [[1, 2, 3], [3, 4, 5]],\r\n        \"expected_output\": [3]\r\n    },\r\n    {\r\n        \"input\": [[10, 20, 30], [30, 40, 50]],\r\n        \"expected_output\": [30]\r\n    },\r\n    {\r\n        \"input\": [[1, 2], [1, 2]],\r\n        \"expected_output\": [1, 2]\r\n    },\r\n    {\r\n        \"input\": [[], []],\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"input\": [[1, 2, 3], [4, 5, 6]],\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"input\": [[5, 5, 5], [5, 5]],\r\n        \"expected_output\": [5]\r\n    },\r\n    {\r\n        \"input\": [[-1, -2, -3], [-3, -2, -1]],\r\n        \"expected_output\": [-1, -2, -3]\r\n    }\r\n]"}, {"id": "33", "title": "Check Perfect Square", "description": "Write a function that checks if a number is a perfect square.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 16,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 81,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 36,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 49,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 50,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 64,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": true\r\n    }\r\n]"}, {"id": "32", "title": "Find the Smallest Number", "description": "Write a program that takes a list of numbers and returns the smallest number.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [-10, 0, 5, 20],\r\n        \"expected_output\": -10\r\n    },\r\n    {\r\n        \"input\": [10, 9, 8, 7],\r\n        \"expected_output\": 7\r\n    },\r\n    {\r\n        \"input\": [5],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [0, 0, 0],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [-1, -2, -3],\r\n        \"expected_output\": -3\r\n    },\r\n    {\r\n        \"input\": [],\r\n        \"expected_output\": null\r\n    },\r\n    {\r\n        \"input\": [100, 200, 50],\r\n        \"expected_output\": 50\r\n    },\r\n    {\r\n        \"input\": [5, 3, 2, 1],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [0, -5, 10],\r\n        \"expected_output\": -5\r\n    }\r\n]"}, {"id": "31", "title": "Check Even or Odd", "description": "Write a function that takes an integer and checks if it is even or odd.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"4\\n\",\r\n        \"expected_output\": \"Even\\n\"\r\n    },\r\n    {\r\n        \"input\": \"7\\n\",\r\n        \"expected_output\": \"Odd\\n\"\r\n    },\r\n    {\r\n        \"input\": \"0\\n\",\r\n        \"expected_output\": \"Even\\n\"\r\n    },\r\n    {\r\n        \"input\": \"-2\\n\",\r\n        \"expected_output\": \"Even\\n\"\r\n    },\r\n    {\r\n        \"input\": \"-3\\n\",\r\n        \"expected_output\": \"Odd\\n\"\r\n    },\r\n    {\r\n        \"input\": \"10\\n\",\r\n        \"expected_output\": \"Even\\n\"\r\n    },\r\n    {\r\n        \"input\": \"11\\n\",\r\n        \"expected_output\": \"Odd\\n\"\r\n    },\r\n    {\r\n        \"input\": \"12\\n\",\r\n        \"expected_output\": \"Even\\n\"\r\n    },\r\n    {\r\n        \"input\": \"15\\n\",\r\n        \"expected_output\": \"Odd\\n\"\r\n    },\r\n    {\r\n        \"input\": \"-4\\n\",\r\n        \"expected_output\": \"Even\\n\"\r\n    }\r\n]"}, {"id": "30", "title": "Calculate Power", "description": "Write a function that calculates the power of a number a raised to b, i.e., a^b.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [2, 3],\r\n        \"expected_output\": 8\r\n    },\r\n    {\r\n        \"input\": [5, 0],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [10, 2],\r\n        \"expected_output\": 100\r\n    },\r\n    {\r\n        \"input\": [3, 4],\r\n        \"expected_output\": 81\r\n    },\r\n    {\r\n        \"input\": [2, -2],\r\n        \"expected_output\": 0.25\r\n    },\r\n    {\r\n        \"input\": [5, 3],\r\n        \"expected_output\": 125\r\n    },\r\n    {\r\n        \"input\": [1, 100],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [0, 5],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [4, 0.5],\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": [9, 0],\r\n        \"expected_output\": 1\r\n    }\r\n]"}, {"id": "29", "title": "Sort a List", "description": "Write a function that takes a list of integers and returns it sorted in ascending order.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [3, 1, 4, 1, 5, 9],\r\n        \"expected_output\": [1, 1, 3, 4, 5, 9]\r\n    },\r\n    {\r\n        \"input\": [10, 8, 12, 5],\r\n        \"expected_output\": [5, 8, 10, 12]\r\n    },\r\n    {\r\n        \"input\": [-1, -5, 0, 3],\r\n        \"expected_output\": [-5, -1, 0, 3]\r\n    },\r\n    {\r\n        \"input\": [2, 4, 3, 1],\r\n        \"expected_output\": [1, 2, 3, 4]\r\n    },\r\n    {\r\n        \"input\": [7, 5, 3, 1, 2],\r\n        \"expected_output\": [1, 2, 3, 5, 7]\r\n    },\r\n    {\r\n        \"input\": [100, 50, 0, -10],\r\n        \"expected_output\": [-10, 0, 50, 100]\r\n    },\r\n    {\r\n        \"input\": [],\r\n        \"expected_output\": []\r\n    },\r\n    {\r\n        \"input\": [1],\r\n        \"expected_output\": [1]\r\n    },\r\n    {\r\n        \"input\": [3, 2],\r\n        \"expected_output\": [2, 3]\r\n    },\r\n    {\r\n        \"input\": [6, 6, 6],\r\n        \"expected_output\": [6, 6, 6]\r\n    }\r\n]"}, {"id": "28", "title": "Sum of Even Numbers", "description": "Write a program that takes an integer n and returns the sum of all even numbers from 1 to n.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 30\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 12\r\n    },\r\n    {\r\n        \"input\": 20,\r\n        \"expected_output\": 110\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": 56\r\n    },\r\n    {\r\n        \"input\": 25,\r\n        \"expected_output\": 156\r\n    },\r\n    {\r\n        \"input\": 100,\r\n        \"expected_output\": 2550\r\n    },\r\n    {\r\n        \"input\": 50,\r\n        \"expected_output\": 1275\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 0\r\n    }\r\n]"}, {"id": "27", "title": "Check Armstrong Number", "description": "Write a function that checks if a number is an Armstrong number (narcissistic number).", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 153,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 9474,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 123,\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": 370,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 371,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1634,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 8208,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": true\r\n    }\r\n]"}, {"id": "26", "title": "Reverse an Integer", "description": "Write a program that takes an integer as input and returns its digits in reverse order.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 1234,\r\n        \"expected_output\": 4321\r\n    },\r\n    {\r\n        \"input\": -567,\r\n        \"expected_output\": -765\r\n    },\r\n    {\r\n        \"input\": 890,\r\n        \"expected_output\": 98\r\n    },\r\n    {\r\n        \"input\": 1000,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": -100,\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": 0,\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": 12,\r\n        \"expected_output\": 21\r\n    },\r\n    {\r\n        \"input\": 45678,\r\n        \"expected_output\": 87654\r\n    },\r\n    {\r\n        \"input\": -321,\r\n        \"expected_output\": -123\r\n    },\r\n    {\r\n        \"input\": 1111,\r\n        \"expected_output\": 1111\r\n    }\r\n]"}, {"id": "25", "title": "Find Maximum in List", "description": "Write a function that takes a list of integers and returns the maximum value.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [1, 5, 3, 9, 2],\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": [-10, -3, -5, -1],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [0, 0, 0, 0],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [100, 200, 300],\r\n        \"expected_output\": 300\r\n    },\r\n    {\r\n        \"input\": [-1, -2, -3],\r\n        \"expected_output\": -1\r\n    },\r\n    {\r\n        \"input\": [5],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n        \"expected_output\": 10\r\n    },\r\n    {\r\n        \"input\": [45, 67, 23, 89],\r\n        \"expected_output\": 89\r\n    },\r\n    {\r\n        \"input\": [9, 8, 7, 6, 5],\r\n        \"expected_output\": 9\r\n    },\r\n    {\r\n        \"input\": [],\r\n        \"expected_output\": null\r\n    }\r\n]"}, {"id": "24", "title": "Convert Decimal to Binary", "description": "Write a program that converts a decimal number to its binary representation.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": \"10\",\r\n        \"expected_output\": \"1010\"\r\n    },\r\n    {\r\n        \"input\": \"255\",\r\n        \"expected_output\": \"11111111\"\r\n    },\r\n    {\r\n        \"input\": \"7\",\r\n        \"expected_output\": \"111\"\r\n    },\r\n    {\r\n        \"input\": \"0\",\r\n        \"expected_output\": \"0\"\r\n    },\r\n    {\r\n        \"input\": \"1\",\r\n        \"expected_output\": \"1\"\r\n    },\r\n    {\r\n        \"input\": \"16\",\r\n        \"expected_output\": \"10000\"\r\n    },\r\n    {\r\n        \"input\": \"31\",\r\n        \"expected_output\": \"11111\"\r\n    },\r\n    {\r\n        \"input\": \"100\",\r\n        \"expected_output\": \"1100100\"\r\n    },\r\n    {\r\n        \"input\": \"64\",\r\n        \"expected_output\": \"1000000\"\r\n    },\r\n    {\r\n        \"input\": \"1024\",\r\n        \"expected_output\": \"10000000000\"\r\n    }\r\n]"}, {"id": "23", "title": "Count Vowels in a String", "description": "Write a function that takes a string as input and counts the number of vowels (a, e, i, o, u).", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": 2\r\n    },\r\n    {\r\n        \"input\": \"OpenAI\",\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": \"sky\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"aeiou\",\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": \"abcdefghijklmnopqrstuvwxyz\",\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": \"123456\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"python programming\",\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": \"HELLO WORLD\",\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": \"\",\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": \"aaa eee iii ooo uuu\",\r\n        \"expected_output\": 15\r\n    }\r\n]"}, {"id": "22", "title": "Convert Seconds to Time", "description": "Write a program that converts a given number of seconds into hours, minutes, and seconds.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"3661\\n\",\r\n        \"expected_output\": \"1 hour 1 minute 1 second\\n\"\r\n    },\r\n    {\r\n        \"input\": \"7324\\n\",\r\n        \"expected_output\": \"2 hours 2 minutes 4 seconds\\n\"\r\n    },\r\n    {\r\n        \"input\": \"45\\n\",\r\n        \"expected_output\": \"0 hour 0 minute 45 seconds\\n\"\r\n    },\r\n    {\r\n        \"input\": \"3600\\n\",\r\n        \"expected_output\": \"1 hour 0 minute 0 seconds\\n\"\r\n    },\r\n    {\r\n        \"input\": \"0\\n\",\r\n        \"expected_output\": \"0 hour 0 minute 0 seconds\\n\"\r\n    },\r\n    {\r\n        \"input\": \"8000\\n\",\r\n        \"expected_output\": \"2 hours 13 minutes 20 seconds\\n\"\r\n    },\r\n    {\r\n        \"input\": \"4000\\n\",\r\n        \"expected_output\": \"1 hour 6 minutes 40 seconds\\n\"\r\n    },\r\n    {\r\n        \"input\": \"123\\n\",\r\n        \"expected_output\": \"0 hour 2 minutes 3 seconds\\n\"\r\n    },\r\n    {\r\n        \"input\": \"5000\\n\",\r\n        \"expected_output\": \"1 hour 23 minutes 20 seconds\\n\"\r\n    },\r\n    {\r\n        \"input\": \"7000\\n\",\r\n        \"expected_output\": \"1 hour 56 minutes 40 seconds\\n\"\r\n    }\r\n]"}, {"id": "21", "title": "GCD of Two Numbers", "description": "Write a program that calculates the greatest common divisor (GCD) of two integers.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"54 24\\n\",\r\n        \"expected_output\": \"6\\n\"\r\n    },\r\n    {\r\n        \"input\": \"81 27\\n\",\r\n        \"expected_output\": \"27\\n\"\r\n    },\r\n    {\r\n        \"input\": \"12 8\\n\",\r\n        \"expected_output\": \"4\\n\"\r\n    },\r\n    {\r\n        \"input\": \"100 25\\n\",\r\n        \"expected_output\": \"25\\n\"\r\n    },\r\n    {\r\n        \"input\": \"15 10\\n\",\r\n        \"expected_output\": \"5\\n\"\r\n    },\r\n    {\r\n        \"input\": \"9 3\\n\",\r\n        \"expected_output\": \"3\\n\"\r\n    },\r\n    {\r\n        \"input\": \"45 60\\n\",\r\n        \"expected_output\": \"15\\n\"\r\n    },\r\n    {\r\n        \"input\": \"101 10\\n\",\r\n        \"expected_output\": \"1\\n\"\r\n    },\r\n    {\r\n        \"input\": \"98 49\\n\",\r\n        \"expected_output\": \"49\\n\"\r\n    },\r\n    {\r\n        \"input\": \"28 7\\n\",\r\n        \"expected_output\": \"7\\n\"\r\n    }\r\n]"}, {"id": "20", "title": "Simple Interest Calculator", "description": "Write a program that calculates simple interest given the principal, rate of interest, and time (in years). The formula is: SI = (P * R * T) / 100.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"1000 5 2\\n\",\r\n        \"expected_output\": \"100.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"1500 4 3\\n\",\r\n        \"expected_output\": \"180.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"2000 3 1\\n\",\r\n        \"expected_output\": \"60.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"500 10 2\\n\",\r\n        \"expected_output\": \"100.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"750 7 5\\n\",\r\n        \"expected_output\": \"262.50\\n\"\r\n    },\r\n    {\r\n        \"input\": \"3000 2 4\\n\",\r\n        \"expected_output\": \"240.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"2500 8 3\\n\",\r\n        \"expected_output\": \"600.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"4000 6 1\\n\",\r\n        \"expected_output\": \"240.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"100 5 10\\n\",\r\n        \"expected_output\": \"50.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"600 9 2\\n\",\r\n        \"expected_output\": \"108.00\\n\"\r\n    }\r\n]"}, {"id": "19", "title": "Multiplication Table", "description": "Write a program that prints the multiplication table for a given number n.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": \"5 10 15 20 25 30 35 40 45 50\\n\"\r\n    },\r\n    {\r\n        \"input\": 3,\r\n        \"expected_output\": \"3 6 9 12 15 18 21 24 27 30\\n\"\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": \"7 14 21 28 35 42 49 56 63 70\\n\"\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": \"1 2 3 4 5 6 7 8 9 10\\n\"\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": \"10 20 30 40 50 60 70 80 90 100\\n\"\r\n    },\r\n    {\r\n        \"input\": 12,\r\n        \"expected_output\": \"12 24 36 48 60 72 84 96 108 120\\n\"\r\n    },\r\n    {\r\n        \"input\": 15,\r\n        \"expected_output\": \"15 30 45 60 75 90 105 120 135 150\\n\"\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": \"2 4 6 8 10 12 14 16 18 20\\n\"\r\n    },\r\n    {\r\n        \"input\": 4,\r\n        \"expected_output\": \"4 8 12 16 20 24 28 32 36 40\\n\"\r\n    },\r\n    {\r\n        \"input\": 9,\r\n        \"expected_output\": \"9 18 27 36 45 54 63 72 81 90\\n\"\r\n    }\r\n]"}, {"id": "18", "title": "Sum of Squares", "description": "Write a function that takes an integer n and returns the sum of squares of the first n natural numbers.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": 3,\r\n        \"expected_output\": 14\r\n    },\r\n    {\r\n        \"input\": 5,\r\n        \"expected_output\": 55\r\n    },\r\n    {\r\n        \"input\": 10,\r\n        \"expected_output\": 385\r\n    },\r\n    {\r\n        \"input\": 1,\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": 2,\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": 4,\r\n        \"expected_output\": 30\r\n    },\r\n    {\r\n        \"input\": 6,\r\n        \"expected_output\": 91\r\n    },\r\n    {\r\n        \"input\": 7,\r\n        \"expected_output\": 140\r\n    },\r\n    {\r\n        \"input\": 8,\r\n        \"expected_output\": 204\r\n    },\r\n    {\r\n        \"input\": 9,\r\n        \"expected_output\": 285\r\n    }\r\n]"}, {"id": "17", "title": "Leap Year Checker", "description": "Write a program that checks if a given year is a leap year. A leap year is divisible by 4, but not by 100 unless it's also divisible by 400.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"2000\\n\",\r\n        \"expected_output\": \"Leap Year\\n\"\r\n    },\r\n    {\r\n        \"input\": \"1900\\n\",\r\n        \"expected_output\": \"Not Leap Year\\n\"\r\n    },\r\n    {\r\n        \"input\": \"2024\\n\",\r\n        \"expected_output\": \"Leap Year\\n\"\r\n    },\r\n    {\r\n        \"input\": \"2020\\n\",\r\n        \"expected_output\": \"Leap Year\\n\"\r\n    },\r\n    {\r\n        \"input\": \"2100\\n\",\r\n        \"expected_output\": \"Not Leap Year\\n\"\r\n    },\r\n    {\r\n        \"input\": \"2400\\n\",\r\n        \"expected_output\": \"Leap Year\\n\"\r\n    },\r\n    {\r\n        \"input\": \"1996\\n\",\r\n        \"expected_output\": \"Leap Year\\n\"\r\n    },\r\n    {\r\n        \"input\": \"2021\\n\",\r\n        \"expected_output\": \"Not Leap Year\\n\"\r\n    },\r\n    {\r\n        \"input\": \"1600\\n\",\r\n        \"expected_output\": \"Leap Year\\n\"\r\n    },\r\n    {\r\n        \"input\": \"1500\\n\",\r\n        \"expected_output\": \"Not Leap Year\\n\"\r\n    }\r\n]"}, {"id": "16", "title": "Temperature Converter", "description": "Write a program that converts a temperature from Celsius to Fahrenheit. The formula is: F = (C * 9/5) + 32.", "language": "c", "test_cases": "[\r\n    {\r\n        \"input\": \"0\\n\",\r\n        \"expected_output\": \"32.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"100\\n\",\r\n        \"expected_output\": \"212.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"-40\\n\",\r\n        \"expected_output\": \"-40.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"37\\n\",\r\n        \"expected_output\": \"98.60\\n\"\r\n    },\r\n    {\r\n        \"input\": \"25\\n\",\r\n        \"expected_output\": \"77.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"30\\n\",\r\n        \"expected_output\": \"86.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"-10\\n\",\r\n        \"expected_output\": \"14.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"50\\n\",\r\n        \"expected_output\": \"122.00\\n\"\r\n    },\r\n    {\r\n        \"input\": \"-273.15\\n\",\r\n        \"expected_output\": \"-459.67\\n\"\r\n    },\r\n    {\r\n        \"input\": \"20\\n\",\r\n        \"expected_output\": \"68.00\\n\"\r\n    }\r\n]"}, {"id": "15", "title": "Calculate Average", "description": "Write a program that takes a list of integers as input and returns their average.", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": [10, 20, 30],\r\n        \"expected_output\": 20\r\n    },\r\n    {\r\n        \"input\": [5, 10, 15, 20, 25],\r\n        \"expected_output\": 15\r\n    },\r\n    {\r\n        \"input\": [7, 14, 21],\r\n        \"expected_output\": 14\r\n    },\r\n    {\r\n        \"input\": [1, 2, 3, 4, 5],\r\n        \"expected_output\": 3\r\n    },\r\n    {\r\n        \"input\": [0, 0, 0],\r\n        \"expected_output\": 0\r\n    },\r\n    {\r\n        \"input\": [-1, -2, -3],\r\n        \"expected_output\": -2\r\n    },\r\n    {\r\n        \"input\": [100, 200],\r\n        \"expected_output\": 150\r\n    },\r\n    {\r\n        \"input\": [1],\r\n        \"expected_output\": 1\r\n    },\r\n    {\r\n        \"input\": [1, 3, 5, 7, 9],\r\n        \"expected_output\": 5\r\n    },\r\n    {\r\n        \"input\": [10, 10, 10],\r\n        \"expected_output\": 10\r\n    }\r\n]"}, {"id": "14", "title": "Check Palindrome", "description": "Write a function that takes a string as input and checks whether it is a palindrome (reads the same forwards and backwards).", "language": "python", "test_cases": "[\r\n    {\r\n        \"input\": \"madam\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"hello\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"racecar\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"level\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"world\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"noon\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"python\",\r\n        \"expected_output\": false\r\n    },\r\n    {\r\n        \"input\": \"A man a plan a canal Panama\",\r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"\", \r\n        \"expected_output\": true\r\n    },\r\n    {\r\n        \"input\": \"12321\",\r\n        \"expected_output\": true\r\n    }\r\n]"}]